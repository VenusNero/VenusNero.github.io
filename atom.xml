<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Venus&#39; Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://VenusNero.github.io/"/>
  <updated>2019-09-13T01:56:00.340Z</updated>
  <id>http://VenusNero.github.io/</id>
  
  <author>
    <name>Venus</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>题解 P3215 [HNOI2011]括号修复 /  [JSOI2011]括号序列</title>
    <link href="http://VenusNero.github.io/2019/09/13/solution_p3215/"/>
    <id>http://VenusNero.github.io/2019/09/13/solution_p3215/</id>
    <published>2019-09-13T01:56:00.103Z</published>
    <updated>2019-09-13T01:56:00.340Z</updated>
    
    <content type="html"><![CDATA[<p>ODT。<br>给定一个括号序列，有若干个操作，分别为区间赋值、区间翻转、区间取反（左右括号反转），区间求修改多少位变成合法的括号序列。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1389654852&auto=0&height=66"></iframe><a id="more"></a><p>%%% zqh 大仙，本来都想硬艹 fhq 了，后来才发现居然可以用 ODT，而且贼好写……<br>逐个操作分析一下</p><ul><li><code>Replace</code> 就是一个简单的推平，直接推就好了。</li><li><code>Swap</code> 比较烦，我是把那一段的迭代器里的元素存到一个数组里，然后修改完再插入回去，修改的方式比较暴力，就是用一个 $\text{pos}$ 记录一下当前的结尾位置，然后从前往后扫数组，当前这个元素的 $r$ 就是 $\text{pos}$，$l$ 就是 $\text{pos}-(r-l+1)+1$，然后把 $\text{pos}$ 修改为 $l-1$，这样挨个做过去就可以了。</li><li><code>Invert</code> 可以大力 <code>Split</code> 一下，然后直接挨个取反就可以了。</li><li><code>Query</code> 操作比较烦，我们可以将 <code>(</code> 视作 <code>1</code>，<code>)</code> 视作 <code>-1</code>，求一手前缀和，如果 $\text{sum}$ 小于 $0$，说明前面 <code>)</code> 多，需要修改 $\lceil\frac{\text{sum}}{2}\rceil$ 个元素，直接加到答案里，然后修改一下 $\text{sum}$，改成 $\text{sum}-\lfloor\frac{\text{sum}}{2}\rfloor$，继续往后做。整个做完之后如果 $\text{sum}\not=0$ 再把 $\lfloor \frac{|\text{sum}|}{2}\rfloor$ 记录到答案里即可。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inl inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> iter set<span class="meta-string">&lt;Node&gt;::iterator </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="keyword">mutable</span> <span class="keyword">int</span> val;<span class="comment">// 1 ( , -1 )</span></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;x) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> l&lt;x.l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;a[MAXN],t[MAXN];</span><br><span class="line"><span class="keyword">int</span> n,Q;</span><br><span class="line"><span class="keyword">char</span> ch[MAXN];</span><br><span class="line"><span class="built_in">set</span>&lt;Node&gt; s;</span><br><span class="line"><span class="function">inl <span class="keyword">int</span> <span class="title">T</span><span class="params">(reg <span class="keyword">char</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x==<span class="string">'('</span>?<span class="number">1</span>:<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl iter <span class="title">Split</span><span class="params">(reg <span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">reg iter it=s.lower_bound((Node)&#123;pos,pos,<span class="number">-1</span>&#125;);</span><br><span class="line"><span class="keyword">if</span>(it!=s.end() &amp;&amp; it-&gt;l==pos) <span class="keyword">return</span> it;</span><br><span class="line">it--;</span><br><span class="line">reg Node x=*it;</span><br><span class="line">s.erase(it);</span><br><span class="line">s.insert((Node)&#123;x.l,pos<span class="number">-1</span>,x.val&#125;);</span><br><span class="line"><span class="keyword">return</span> s.insert((Node)&#123;pos,x.r,x.val&#125;).first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">void</span> <span class="title">Assign</span><span class="params">(reg <span class="keyword">int</span> l,reg <span class="keyword">int</span> r,reg <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">reg iter R=Split(r+<span class="number">1</span>),L=Split(l);</span><br><span class="line">s.erase(L,R);</span><br><span class="line">s.insert((Node)&#123;l,r,val&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">void</span> <span class="title">Reverse</span><span class="params">(reg <span class="keyword">int</span> l,reg <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">reg <span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line">reg iter R=Split(r+<span class="number">1</span>),L=Split(l);</span><br><span class="line"><span class="keyword">for</span>(reg iter it=L;it!=R;it++) a[++tot]=(*it);</span><br><span class="line">s.erase(L,R);</span><br><span class="line">reg <span class="keyword">int</span> pos=a[tot].r;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)</span><br><span class="line">&#123;</span><br><span class="line">t[i].val=a[i].val;</span><br><span class="line">t[i].r=pos;</span><br><span class="line">t[i].l=pos-(a[i].r-a[i].l+<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">pos-=(a[i].r-a[i].l+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++) s.insert(t[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">void</span> <span class="title">Modify</span><span class="params">(reg <span class="keyword">int</span> l,reg <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">reg iter R=Split(r+<span class="number">1</span>),L=Split(l);</span><br><span class="line"><span class="keyword">for</span>(reg iter it=L;it!=R;it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(it-&gt;val==<span class="number">-1</span>) it-&gt;val=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(it-&gt;val==<span class="number">1</span>) it-&gt;val=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">int</span> <span class="title">Query</span><span class="params">(reg <span class="keyword">int</span> l,reg <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">reg <span class="keyword">int</span> sum=<span class="number">0</span>,res=<span class="number">0</span>;</span><br><span class="line">reg iter R=Split(r+<span class="number">1</span>),L=Split(l);</span><br><span class="line"><span class="keyword">for</span>(reg iter it=L;it!=R;it++)</span><br><span class="line">&#123;</span><br><span class="line">sum+=(it-&gt;r-it-&gt;l+<span class="number">1</span>)*it-&gt;val;</span><br><span class="line"><span class="keyword">if</span>(sum&lt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">res+=-sum/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>((-sum)&amp;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">sum=<span class="number">1</span>;</span><br><span class="line">res++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> sum=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">res+=<span class="built_in">abs</span>(sum)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">void</span> <span class="title">Out</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"   start : "</span>);</span><br><span class="line">reg iter R=Split(n+<span class="number">1</span>),L=Split(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(reg iter it=L;it!=R;it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=it-&gt;l;i&lt;=it-&gt;r;i++) <span class="built_in">printf</span>(<span class="string">"%c"</span>,it-&gt;val==<span class="number">1</span>?<span class="string">'('</span>:<span class="string">')'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"end."</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;Q);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,ch+<span class="number">1</span>);</span><br><span class="line">reg <span class="keyword">int</span> pos=<span class="number">1</span>;</span><br><span class="line">reg <span class="keyword">char</span> now=ch[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch[i]!=now)</span><br><span class="line">&#123;</span><br><span class="line">s.insert((Node)&#123;pos,i<span class="number">-1</span>,T(now)&#125;);</span><br><span class="line">now=ch[i];</span><br><span class="line">pos=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">s.insert((Node)&#123;pos,n,T(now)&#125;);</span><br><span class="line"><span class="keyword">while</span>(Q--)</span><br><span class="line">&#123;</span><br><span class="line">reg <span class="built_in">string</span> opt;</span><br><span class="line">reg <span class="keyword">int</span> x,y;</span><br><span class="line">reg <span class="keyword">char</span> z;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;opt;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="string">"Replace"</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;z;</span><br><span class="line">Assign(x,y,T(z));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="string">"Swap"</span>) Reverse(x,y);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="string">"Invert"</span>) Modify(x,y);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="string">"Query"</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Query(x,y));</span><br><span class="line"><span class="comment">//if(opt!="Query") Out();</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ODT。&lt;br&gt;给定一个括号序列，有若干个操作，分别为区间赋值、区间翻转、区间取反（左右括号反转），区间求修改多少位变成合法的括号序列。&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=1389654852&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;
    
    </summary>
    
    
      <category term="珂朵莉树" scheme="http://VenusNero.github.io/tags/%E7%8F%82%E6%9C%B5%E8%8E%89%E6%A0%91/"/>
    
      <category term="题解" scheme="http://VenusNero.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>题解 P2183 [国家集训队]礼物</title>
    <link href="http://VenusNero.github.io/2019/08/26/solution_p2183/"/>
    <id>http://VenusNero.github.io/2019/08/26/solution_p2183/</id>
    <published>2019-08-26T13:35:07.617Z</published>
    <updated>2019-08-26T13:35:07.839Z</updated>
    
    <content type="html"><![CDATA[<p>扩展卢卡斯。</p><p>将 $n$ 个不同的礼物分给 $m$ 个人，每个人需要的礼物数为 $a_i$，求出分礼物的方案数。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=409941358&auto=0&height=66"></iframe><a id="more"></a><p>这题相当简单啊……唯一的难度就是在 $\texttt{ExLucas}$ 上了吧……</p><p>我们需要将 $\text{sum}$ 个礼物分给 $n$ 个人，每个人需要拿的礼物数为 $a[i]$，由于每个礼物不同，要求方案数，容易想到组合数学。</p><p>我们考虑一道小学奥数题：$7$ 个人中选 $3$ 个拍照，方案数是 $7\times 6\times 5$，而它的具体意义是：考虑第一个位置能选谁，方案数是 $7$，再考虑第二个位置，由于第一个位置已经放了一个人，所以方案数是 $6$，同理，第三个位置方案数为 $5$，然后我们再使用乘法原理将它们合并。同理，我们对这道题使用相同的思想进行拆解，考虑第一个人选礼物的方案数，是 $n$ 个里选 $a_1$ 个，即 $\binom{n}{a_1}$，再考虑第二个，此时我们还剩下 $n-a_1$ 个礼物，选 $a_2$ 个，方案数为 $\binom{n-a_1}{a_2}$，以此类推，第三个的方案数为 $\binom{n-a_1-a_2}{a_3}$。至此，我们已经得出了此题的做法。</p><p>令</p><script type="math/tex; mode=display">\text{sum}_i=\sum_{j=1}^{i}a_i</script><p>则答案为</p><script type="math/tex; mode=display">\text{ans}=\prod_{i=1}^{m}\binom{n-\text{sum}_ {i-1}}{a_i}\ \text{mod}\ p</script><p>使用 $\texttt{ExLucas}$ 即可解出。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 15</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inl inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function">inl <span class="keyword">void</span> <span class="title">Read</span><span class="params">(reg T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=<span class="number">0</span>;</span><br><span class="line">reg <span class="keyword">int</span> fu=<span class="number">1</span>;</span><br><span class="line">reg <span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) fu=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch<span class="number">-48</span>);</span><br><span class="line">x*=fu;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ExGcd</span><span class="params">(reg <span class="keyword">int</span> a,reg <span class="keyword">int</span> b,reg <span class="keyword">int</span> &amp;x,reg <span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!b)</span><br><span class="line">&#123;</span><br><span class="line">x=<span class="number">1</span>;</span><br><span class="line">y=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">ExGcd(b,a%b,x,y);</span><br><span class="line">reg <span class="keyword">int</span> t=x;</span><br><span class="line">x=y;</span><br><span class="line">y=t-a/b*y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Gcd</span><span class="params">(reg <span class="keyword">int</span> x,reg <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> !y?x:Gcd(y,x%y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">int</span> <span class="title">Inv</span><span class="params">(reg <span class="keyword">int</span> a,reg <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">reg <span class="keyword">int</span> x,y;</span><br><span class="line">ExGcd(a,b,x,y);</span><br><span class="line"><span class="keyword">return</span> (x%b+b)%b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">int</span> <span class="title">Pow</span><span class="params">(reg <span class="keyword">int</span> x,reg <span class="keyword">int</span> y,reg <span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">reg <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=x*x%p) <span class="keyword">if</span>(y&amp;<span class="number">1</span>) res=res*x%p;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">int</span> <span class="title">Crt</span><span class="params">(reg <span class="keyword">int</span> x,reg <span class="keyword">int</span> y,reg <span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> Inv(y/p,p)*(y/p)*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Fac</span><span class="params">(reg <span class="keyword">int</span> x,reg <span class="keyword">int</span> a,reg <span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!x) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">reg <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=p;i++) <span class="keyword">if</span>(i%a) res=res*i%p;</span><br><span class="line">res=Pow(res,x/p,p);</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=x%p;i++) <span class="keyword">if</span>(i%a) res=res*i%p;</span><br><span class="line"><span class="keyword">return</span> res*Fac(x/a,a,p)%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">int</span> <span class="title">C</span><span class="params">(reg <span class="keyword">int</span> n,reg <span class="keyword">int</span> m,reg <span class="keyword">int</span> a,reg <span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">reg <span class="keyword">int</span> x=Fac(n,a,p),y=Fac(m,a,p),z=Fac(n-m,a,p),sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i/=a) sum+=i/a;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=m;i&gt;=<span class="number">1</span>;i/=a) sum-=i/a;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=n-m;i&gt;=<span class="number">1</span>;i/=a) sum-=i/a;</span><br><span class="line"><span class="keyword">return</span> x*Pow(a,sum,p)%p*Inv(y,p)%p*Inv(z,p)%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">int</span> <span class="title">ExLucas</span><span class="params">(reg <span class="keyword">int</span> n,reg <span class="keyword">int</span> m,reg <span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&lt;m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">reg <span class="keyword">int</span> t=p,res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=p;i++)</span><br><span class="line">&#123;</span><br><span class="line">reg <span class="keyword">int</span> x=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!(t%i))</span><br><span class="line">&#123;</span><br><span class="line">x*=i;</span><br><span class="line">t/=i;</span><br><span class="line">&#125;</span><br><span class="line">res=(res+Crt(C(n,m,i,x),p,x))%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t&gt;<span class="number">1</span>) res=(res+Crt(C(n,m,t,t),p,t))%p;</span><br><span class="line"><span class="keyword">return</span> res%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,p,a[MAXN],sum[MAXN],ans=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">reg <span class="keyword">int</span> sm=<span class="number">0</span>;</span><br><span class="line">Read(p);</span><br><span class="line">Read(n);</span><br><span class="line">Read(m);</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">Read(a[i]);</span><br><span class="line">sm+=a[i];</span><br><span class="line">sum[i]=sum[i<span class="number">-1</span>]+a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sm&gt;n) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Impossible"</span>),<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) ans=ans*ExLucas(n-sum[i<span class="number">-1</span>],a[i],p)%p;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;扩展卢卡斯。&lt;/p&gt;
&lt;p&gt;将 $n$ 个不同的礼物分给 $m$ 个人，每个人需要的礼物数为 $a_i$，求出分礼物的方案数。&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=409941358&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;
    
    </summary>
    
    
      <category term="数论" scheme="http://VenusNero.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="题解" scheme="http://VenusNero.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="组合数学" scheme="http://VenusNero.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
      <category term="扩展卢卡斯" scheme="http://VenusNero.github.io/tags/%E6%89%A9%E5%B1%95%E5%8D%A2%E5%8D%A1%E6%96%AF/"/>
    
  </entry>
  
  <entry>
    <title>题解 CF Round 564 Div.2</title>
    <link href="http://VenusNero.github.io/2019/06/12/solution_cfr564div2/"/>
    <id>http://VenusNero.github.io/2019/06/12/solution_cfr564div2/</id>
    <published>2019-06-12T13:38:28.708Z</published>
    <updated>2019-06-12T13:38:28.947Z</updated>
    
    <content type="html"><![CDATA[<p>有幸参加验题……不过只验了 $A,B,C,D$，$F$ 题是后来会的，有点菜（</p><p>感谢 Sooke 吖qwq</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=425100599&auto=0&height=66"></iframe><a id="more"></a><p>所有题目见：<a href="https://www.luogu.org/problemnew/lists?name=Nauuo&amp;orderitem=pid&amp;tag=&amp;content=0&amp;type=" target="_blank" rel="noopener">Link</a></p><h1 id="A-Nauuo-and-Votes"><a href="#A-Nauuo-and-Votes" class="headerlink" title="A Nauuo and Votes"></a>A Nauuo and Votes</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我喜欢 2A (votes)。简单的分支结构，实际的题目环境，非常的适合新人。</span><br><span class="line"> - By Sooke</span><br></pre></td></tr></table></figure><p>模拟。</p><p>直接按题意模拟即可，具体的方法就是把 $z$ 个人全部丢到 upvote，或者全部丢到 downvote 里再判断一下即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inl inline</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line"><span class="keyword">if</span>(x+z&lt;y) <span class="built_in">puts</span>(<span class="string">"-"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(y+z&lt;x) <span class="built_in">puts</span>(<span class="string">"+"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x==y &amp;&amp; !z) <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"?"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="B-Nauuo-and-Chess"><a href="#B-Nauuo-and-Chess" class="headerlink" title="B Nauuo and Chess"></a>B Nauuo and Chess</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我喜欢 2B (chess)。不太难想的构造，但在 div.2 场 有一定的区分作用。</span><br><span class="line"> - By Sooke</span><br></pre></td></tr></table></figure><p>结论题。</p><p>题目的要求是两点的曼哈顿距离大于等于两点的编号差，显然，一个边长为 $m$ 的棋盘，最多可以容纳 $m\times 2-1$ 个棋子，用贪心的思想我们可以把第 $1$ 个棋子和第 $n$ 个棋子分别放到棋盘的左上角和右下角，就可以很容易地得到这个结论。</p><p>那么确定了边长之后，就是怎么摆的问题了。这点非常容易，直接沿着边摆过去就行了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inl inline</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,ans[MAXN][MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">reg <span class="keyword">int</span> m=n/<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n/<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m &amp;&amp; i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,<span class="number">1</span>,i);</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n-m+<span class="number">1</span>;i++) <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,i,m);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="C-Nauuo-and-Cards"><a href="#C-Nauuo-and-Cards" class="headerlink" title="C Nauuo and Cards"></a>C Nauuo and Cards</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我喜欢 2C/1A (cards)。很考验代码细心能力，是一道好题。</span><br><span class="line"> - By Sooke</span><br></pre></td></tr></table></figure><p>结论题。</p><p>考虑使用 $0$ 牌和不使用 $0$ 牌，如果必须使用 $0$ 牌，那么最好的办法就是把所有数字牌拿到手中，再按顺序摆回去，这样的操作次数是 $\max(pos[i]-i+n+1)$，否则次数为第一个 $pos[i]≥i$ 的 $pos[i]-i$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 1919810</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inl inline</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,a[MAXN],b[MAXN],pos[MAXN],ans,Ans=inf;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i]);</span><br><span class="line">pos[b[i]]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) ans=max(ans,pos[i]-i+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(pos[i]&gt;=i)</span><br><span class="line">&#123;</span><br><span class="line">Ans=pos[i]-i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((pos[i]&lt;i &amp;&amp; Ans&lt;pos[i]-i+n+<span class="number">1</span>) || (pos[i]&gt;=i &amp;&amp; Ans!=pos[i]-i))</span><br><span class="line">&#123;</span><br><span class="line">Ans=inf;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Ans==inf?ans:Ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="D-Nauuo-and-Circle"><a href="#D-Nauuo-and-Circle" class="headerlink" title="D Nauuo and Circle"></a>D Nauuo and Circle</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我喜欢 2D/1B (circle)。结论很简单也很美丽，证明需要一定观察能力。</span><br><span class="line"> - By Sooke</span><br></pre></td></tr></table></figure><p>结论题。</p><p>（这道题是 Sooke 大概半年前和我说的，本来说要给洛咕出一次 CF 模拟赛，结果洛咕的 CF 赛制一直咕，所以直接给 CF 出了233）</p><p>考虑 $f[u]$ 作为 $u$ 这棵子树的方案数，由乘法原理可以得：$f[u]=(siz[u]+[u\not=root])!\times\prod_{v\in son[u]}f[v]$（注意：那个感叹号是阶乘），拉出来就是每个点的度数的阶乘的积。</p><p>（记得用 $\texttt{1ll}$ 或者开 $\texttt{long long}$）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inl inline</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n,deg[MAXN],ans;</span><br><span class="line"><span class="function">inl <span class="keyword">int</span> <span class="title">Mul</span><span class="params">(reg <span class="keyword">int</span> x,reg <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1l</span>l*x*y<span class="number">-1l</span>l*x*y/Mod*Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">ans=n;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">reg <span class="keyword">int</span> x,y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;x,&amp;y);</span><br><span class="line">deg[x]++;</span><br><span class="line">deg[y]++;</span><br><span class="line">ans=Mul(ans,Mul(deg[x],deg[y]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="F-Nauuo-and-Portals"><a href="#F-Nauuo-and-Portals" class="headerlink" title="F Nauuo and Portals"></a>F Nauuo and Portals</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我喜欢 2F/1D (portals)。构造算是挺有趣的，想对方向就可以过，对大部分人来说要想比较久的时间。</span><br><span class="line"> - By Sooke</span><br></pre></td></tr></table></figure><p>可以把一个 $n\times n$ 的问题转变成 $(n-1)\times (n-1)$ 的问题，具体做法为：</p><ul><li><p>如果已经满足，那就直接转化。</p></li><li><p>如果还未满足，那就找到应该在第一行中放在第一列那个，和应该在第一列中放在第一行那个，两个位置各放一个。</p></li></ul><p>官方题解也有说，这题显然是可以 $\Theta(n)$ 解决的，但是 checker 要写 $\Theta(n^2)$，比较有意思。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inl inline</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Portal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ax,ay,bx,by;</span><br><span class="line">&#125;ans[MAXN];</span><br><span class="line"><span class="keyword">int</span> n,tot,a[MAXN],b[MAXN],posa[MAXN],posb[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i]);</span><br><span class="line">        posb[b[i]]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        posa[a[i]]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(reg <span class="keyword">int</span> i=n;i&gt;<span class="number">1</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]==i &amp;&amp; b[i]==i) <span class="keyword">continue</span>;</span><br><span class="line">        ans[++tot].ax=i;</span><br><span class="line">        ans[tot].ay=a[i];</span><br><span class="line">        ans[tot].bx=b[i];</span><br><span class="line">        ans[tot].by=i;</span><br><span class="line">        a[posa[i]]=a[i];</span><br><span class="line">        posa[a[i]]=posa[i];</span><br><span class="line">        b[posb[i]]=b[i];</span><br><span class="line">        posb[b[i]]=posb[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,tot);</span><br><span class="line">    <span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++) <span class="built_in">printf</span>(<span class="string">"%d %d %d %d\n"</span>,ans[i].ax,ans[i].ay,ans[i].bx,ans[i].by);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有幸参加验题……不过只验了 $A,B,C,D$，$F$ 题是后来会的，有点菜（&lt;/p&gt;
&lt;p&gt;感谢 Sooke 吖qwq&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=425100599&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://VenusNero.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="比赛" scheme="http://VenusNero.github.io/tags/%E6%AF%94%E8%B5%9B/"/>
    
      <category term="CodeForces" scheme="http://VenusNero.github.io/tags/CodeForces/"/>
    
  </entry>
  
  <entry>
    <title>题解 P4883 mzf的考验</title>
    <link href="http://VenusNero.github.io/2019/05/21/solution_p4883/"/>
    <id>http://VenusNero.github.io/2019/05/21/solution_p4883/</id>
    <published>2019-05-21T14:01:59.379Z</published>
    <updated>2019-05-21T14:04:09.873Z</updated>
    
    <content type="html"><![CDATA[<p>平衡树。</p><p>给定一个数列，有三种操作：翻转区间，区间异或，区间查和。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=467509812&auto=0&height=66"></iframe><a id="more"></a><p>非常裸的平衡树，带翻转似乎只有平衡树能做了吧（</p><p>反正 $\texttt{fhq}$ 天下第一就是了【暴论】</p><p>依然是区间翻转打标记，区间查询就维护一个 $\texttt{sum}$ 数组，比较难搞的是这个区间异或，注意到题目中有写：$\texttt{d}\in[0,2^{20})$，考虑使用常用的套路，即将它拆成一位一位的分别维护，由于只有 $20$ 位，所以可以很轻松地存下来。</p><p>（尝试了一下新的毒瘤码风，各位感性理解一下吧qaq）</p><p><img src="http://wx3.sinaimg.cn/large/0060lm7Tly1g39abmz8sxj30ap05at8w.jpg" alt=""></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> K 20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inl inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,a[MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FHQTreap</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> ch[MAXN][<span class="number">2</span>],siz[MAXN],val[MAXN],key[MAXN],tag[MAXN],root,sze,num[MAXN][K+<span class="number">5</span>],fg[MAXN],stk[MAXN],top;</span><br><span class="line"><span class="keyword">int</span> sum[MAXN];</span><br><span class="line"><span class="keyword">bool</span> rev[MAXN];</span><br><span class="line"><span class="function">inl <span class="keyword">void</span> <span class="title">Mxr</span><span class="params">(reg <span class="keyword">int</span> rt,reg <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tag[rt]^=v;</span><br><span class="line">val[rt]^=v;</span><br><span class="line">sum[rt]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=K;i++) fg[i]=(v&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=K;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(fg[i]) num[rt][i]=siz[rt]-num[rt][i];</span><br><span class="line">sum[rt]+=(<span class="number">1</span>&lt;&lt;i)*num[rt][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">void</span> <span class="title">Psu</span><span class="params">(reg <span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">siz[rt]=siz[ch[rt][<span class="number">0</span>]]+siz[ch[rt][<span class="number">1</span>]]+<span class="number">1</span>;</span><br><span class="line">sum[rt]=sum[ch[rt][<span class="number">0</span>]]+sum[ch[rt][<span class="number">1</span>]]+val[rt];</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=K;i++) num[rt][i]=num[ch[rt][<span class="number">0</span>]][i]+num[ch[rt][<span class="number">1</span>]][i]+((val[rt]&gt;&gt;i)&amp;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">void</span> <span class="title">Psd</span><span class="params">(reg <span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(rev[rt])</span><br><span class="line">&#123;</span><br><span class="line">swap(ch[rt][<span class="number">0</span>],ch[rt][<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span>(ch[rt][<span class="number">0</span>]) rev[ch[rt][<span class="number">0</span>]]^=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(ch[rt][<span class="number">1</span>]) rev[ch[rt][<span class="number">1</span>]]^=<span class="number">1</span>;</span><br><span class="line">rev[rt]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tag[rt])</span><br><span class="line">&#123;</span><br><span class="line">reg <span class="keyword">int</span> v=tag[rt];</span><br><span class="line">tag[rt]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(ch[rt][<span class="number">0</span>]) Mxr(ch[rt][<span class="number">0</span>],v);</span><br><span class="line"><span class="keyword">if</span>(ch[rt][<span class="number">1</span>]) Mxr(ch[rt][<span class="number">1</span>],v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Mrg</span><span class="params">(reg <span class="keyword">int</span> x,reg <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!x || !y) <span class="keyword">return</span> x+y;</span><br><span class="line"><span class="keyword">if</span>(key[x]&lt;key[y])</span><br><span class="line">&#123;</span><br><span class="line">Psd(x);</span><br><span class="line">ch[x][<span class="number">1</span>]=Mrg(ch[x][<span class="number">1</span>],y);</span><br><span class="line">Psu(x);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Psd(y);</span><br><span class="line">ch[y][<span class="number">0</span>]=Mrg(x,ch[y][<span class="number">0</span>]);</span><br><span class="line">Psu(y);</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Spt</span><span class="params">(reg <span class="keyword">int</span> rt,reg <span class="keyword">int</span> pos,reg <span class="keyword">int</span> &amp;x,reg <span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!rt) x=y=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Psd(rt);</span><br><span class="line"><span class="keyword">if</span>(pos&lt;=siz[ch[rt][<span class="number">0</span>]])</span><br><span class="line">&#123;</span><br><span class="line">y=rt;</span><br><span class="line">Spt(ch[rt][<span class="number">0</span>],pos,x,ch[rt][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">x=rt;</span><br><span class="line">Spt(ch[rt][<span class="number">1</span>],pos-siz[ch[rt][<span class="number">0</span>]]<span class="number">-1</span>,ch[rt][<span class="number">1</span>],y);</span><br><span class="line">&#125;</span><br><span class="line">Psu(rt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">int</span> <span class="title">Nwd</span><span class="params">(reg <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">reg <span class="keyword">int</span> rt=++sze;</span><br><span class="line">siz[rt]=<span class="number">1</span>;</span><br><span class="line">val[rt]=v;</span><br><span class="line">key[rt]=rand();</span><br><span class="line">tag[rt]=rev[rt]=<span class="number">0</span>;</span><br><span class="line">ch[rt][<span class="number">0</span>]=ch[rt][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">int</span> <span class="title">Bld</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(stk,<span class="number">0</span>,<span class="keyword">sizeof</span>(stk));</span><br><span class="line">top=<span class="number">0</span>;</span><br><span class="line">reg <span class="keyword">int</span> x,pre;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">x=Nwd(a[i]);</span><br><span class="line">pre=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(top &amp;&amp; key[stk[top]]&gt;key[x])</span><br><span class="line">&#123;</span><br><span class="line">Psu(stk[top]);</span><br><span class="line">pre=stk[top];</span><br><span class="line">stk[top--]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(top) ch[stk[top]][<span class="number">1</span>]=x;</span><br><span class="line">ch[x][<span class="number">0</span>]=pre;</span><br><span class="line">stk[++top]=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(top) Psu(stk[top--]);</span><br><span class="line"><span class="keyword">return</span> stk[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">void</span> <span class="title">Mdy</span><span class="params">(reg <span class="keyword">int</span> l,reg <span class="keyword">int</span> r,reg <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">reg <span class="keyword">int</span> x,y,z;</span><br><span class="line">Spt(root,r,x,z);</span><br><span class="line">Spt(x,l<span class="number">-1</span>,x,y);</span><br><span class="line">Mxr(y,v);</span><br><span class="line">root=Mrg(Mrg(x,y),z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">void</span> <span class="title">Rev</span><span class="params">(reg <span class="keyword">int</span> l,reg <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">reg <span class="keyword">int</span> x,y,z;</span><br><span class="line">Spt(root,r,x,z);</span><br><span class="line">Spt(x,l<span class="number">-1</span>,x,y);</span><br><span class="line">rev[y]^=<span class="number">1</span>;</span><br><span class="line">root=Mrg(Mrg(x,y),z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">int</span> <span class="title">Qry</span><span class="params">(reg <span class="keyword">int</span> l,reg <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">reg <span class="keyword">int</span> x,y,z;</span><br><span class="line">Spt(root,r,x,z);</span><br><span class="line">Spt(x,l<span class="number">-1</span>,x,y);</span><br><span class="line">reg <span class="keyword">int</span> res=sum[y];</span><br><span class="line">root=Mrg(Mrg(x,y),z);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;T;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">T.root=T.Bld();</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line">reg <span class="keyword">int</span> opt,x,y,z;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld"</span>,&amp;opt,&amp;x,&amp;y);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>) T.Rev(x,y);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;z);</span><br><span class="line">T.Mdy(x,y,z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,T.Qry(x,y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平衡树。&lt;/p&gt;
&lt;p&gt;给定一个数列，有三种操作：翻转区间，区间异或，区间查和。&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=467509812&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://VenusNero.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="FHQTreap" scheme="http://VenusNero.github.io/tags/FHQTreap/"/>
    
  </entry>
  
  <entry>
    <title>题解 模拟赛 5-12</title>
    <link href="http://VenusNero.github.io/2019/05/15/solution_2019_5_12/"/>
    <id>http://VenusNero.github.io/2019/05/15/solution_2019_5_12/</id>
    <published>2019-05-15T14:18:31.287Z</published>
    <updated>2019-05-15T14:24:00.334Z</updated>
    
    <content type="html"><![CDATA[<p>菜的抠脚。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1365422876&auto=0&height=66"></iframe><a id="more"></a><h1 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h1><p>给定一棵树，改变最少的结点使其成为一棵二叉搜索树，求出点数。$n\leq 1e5$。</p><p>我们知道，一棵严格二叉搜索树的中序遍历一定是一个严格上升序列，所以第一步肯定是求出中序遍历，然后有的同学就会想去求出它的 $\texttt{LIS}$，然后贪心做法减一减，但这样显然是不行的，因为不一定能做到严格上升，所以我们可以对求出的中序遍历中每个 $a_i$ 减去 $i$，再求 $\texttt{LIS}$，再减就没问题了。</p><h1 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h1><p>定义区间 $[L,R]$ 为特殊的，当且仅当存在一个 $a_k (L\leq k\leq R)$，使得区间内的每个数都是 $a_k$ 的倍数，求出最长特殊区间的长度 $ans$ 及所有长度为 $ans$ 的特殊区间的 $L$。$n\leq 5e5$</p><p>做法听说是 二分 + $\texttt{ST}$ 表，但是我们并不会这么高级的做法，考虑暴力做法，对每个点向左右进行扩展，找到边界，计算区间长度与 $ans$ 进行比较，记录答案即可。</p><p>在数据随机的情况下复杂度可以到达优秀的 $\Theta(n\log n)$，轻松过掉（甚至暴力碾标算）。</p><h1 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h1><p>给定排列 $\texttt{p}$，定义排列 $\texttt{q}$ 是优美的，当且仅当对一个排列 $\texttt{s}=\{1,2,…,n\}$ 进行 $n$ 次交换，每次交换 $s_{q_i}$ 和 $s_{q_i+1}$ 后能使得 $\texttt{s}=\texttt{p}$，求出优美的排列的个数。$n\leq 50$。</p><p>考虑区间 $\texttt{DP}$，定义 $f[i][j]$ 为将区间 $[i,j]$ 变换为目标状态的方案数，我们可以发现一个限制，就是如果我们交换了 $k$ 和 $k+1$，那么前面那段就不可能交换到后面了，后面那段也不可能交换到前面，所以我们要令 $k$ 前面的全部 $\leq k$，后面的全部 $≥k$，记忆化搜索优化 $\texttt{DP}$ 即可，方程式为 $f[i][j]=f[i][j]+\texttt{Dfs}(i,k) \times \texttt{Dfs}(k+1,j) \times \texttt{C}(j-i-1,k-i)$。</p><p>最终为 $\Theta(n^4)$ 的优秀复杂度。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;菜的抠脚。&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=1365422876&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://VenusNero.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="比赛" scheme="http://VenusNero.github.io/tags/%E6%AF%94%E8%B5%9B/"/>
    
      <category term="DP" scheme="http://VenusNero.github.io/tags/DP/"/>
    
      <category term="暴力" scheme="http://VenusNero.github.io/tags/%E6%9A%B4%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>题解 P5331 [SNOI2019]通信</title>
    <link href="http://VenusNero.github.io/2019/05/12/solution_p5331/"/>
    <id>http://VenusNero.github.io/2019/05/12/solution_p5331/</id>
    <published>2019-05-12T14:27:09.358Z</published>
    <updated>2019-05-12T14:27:43.826Z</updated>
    
    <content type="html"><![CDATA[<p>费用流。</p><p>$n$ 个排成一列的哨站要进行通信。第 $i$ 个哨站的频段为 $a_i$。</p><p>每个哨站 $i$ 需要选择以下二者之一：</p><p> 1.直接连接到控制中心，代价为 $W$；<br> 2.连接到前面的某个哨站 $j (j&lt;i)$，代价为 $|a_i-a_j|$。 每个哨站只能被后面的至多一个哨站连接。</p><p>请你求出最小可能的代价和。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=28496172&auto=0&height=66"></iframe><a id="more"></a><p>首先这个题面以及数据范围已经可以看出一点网络流的影子了，配合费用进行考虑就是费用流，那么考虑每个点都可以 <strong>向别人连</strong>，或者 <strong>被别人连</strong>，考虑拆点，将 $i$ 拆出 $i’$，分别代表 <strong>连向</strong> 和 <strong>被连向</strong>。显然，这样会喜提 $\texttt{TLE}$，因为边数实在太多了，已经到达了 $n^2$，而网络流算法中往往是要乘上 $m$ 的。那么有什么方法可以减少边数呢？</p><p>写题解的此时此刻，我想到了神鱼枫姐姐曾经和我说过的话：</p><p><img src="https://i.loli.net/2019/05/12/5cd82b1dcb30c.png" alt=""></p><p>没错，数据结构优化建边。可以使用一个类似分治的算法很快地建出一个很简洁的图。别的 $\texttt{julao}$ 说是主席树，但窝看不大出来，觉得更像一个 $\texttt{cdq}$ 分治，因为我印象中的主席树都是：</p><p><img src="https://i.loli.net/2019/05/12/5cd82c17cfc11.png" alt=""></p><p>（码风不忍直视）</p><p>不过这不是重点，重点是经过一个建虚点之后连点的过程后，我们就可以直接跑费用流而不 $\texttt{TLE}$ 了。</p><p>依然推荐使用 $\texttt{zkw}$ 费用流。</p><p>（写法略暴力，如 $\texttt{define int long long}$，见谅）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 50005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXM 1000005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf (long long)4340410370284600380</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inl inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">deque</span> &lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">1</span>,fst[MAXN&lt;&lt;<span class="number">1</span>],nxt[MAXM],to[MAXM],w[MAXM],cot[MAXM],cur[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> n,W,a[MAXN],t[MAXN],S,T,dis[MAXN&lt;&lt;<span class="number">1</span>],mincost,tot,sum;</span><br><span class="line"><span class="keyword">bool</span> inq[MAXN&lt;&lt;<span class="number">1</span>],vis[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(reg <span class="keyword">int</span> u,reg <span class="keyword">int</span> v,reg <span class="keyword">int</span> c,reg <span class="keyword">int</span> fl)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to[++cnt]=v;</span><br><span class="line">nxt[cnt]=fst[u];</span><br><span class="line">fst[u]=cnt;</span><br><span class="line">w[cnt]=c;</span><br><span class="line">cot[cnt]=fl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">bool</span> <span class="title">Spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dis,<span class="number">60</span>,<span class="keyword">sizeof</span>(dis));</span><br><span class="line"><span class="built_in">memset</span>(inq,<span class="number">0</span>,<span class="keyword">sizeof</span>(inq));</span><br><span class="line">q.push_front(T);</span><br><span class="line">dis[T]=<span class="number">0</span>;</span><br><span class="line">inq[T]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">reg <span class="keyword">int</span> u=q.front();</span><br><span class="line">q.pop_front();</span><br><span class="line">inq[u]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=fst[u];i;i=nxt[i])</span><br><span class="line">&#123;</span><br><span class="line">reg <span class="keyword">int</span> v=to[i];</span><br><span class="line"><span class="keyword">if</span>(dis[v]&gt;dis[u]-cot[i] &amp;&amp; w[i^<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">dis[v]=dis[u]-cot[i];</span><br><span class="line"><span class="keyword">if</span>(!inq[v])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!q.empty() &amp;&amp; dis[v]&lt;dis[q.front()]) q.push_front(v);</span><br><span class="line"><span class="keyword">else</span> q.push_back(v);</span><br><span class="line">inq[v]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dis[S]!=inf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dfs</span><span class="params">(reg <span class="keyword">int</span> u,reg <span class="keyword">int</span> flow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vis[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(u==T || !flow) <span class="keyword">return</span> flow;</span><br><span class="line">reg <span class="keyword">int</span> used=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=cur[u];i;i=nxt[i])</span><br><span class="line">&#123;</span><br><span class="line">cur[u]=i;</span><br><span class="line">reg <span class="keyword">int</span> v=to[i];</span><br><span class="line"><span class="keyword">if</span>(dis[v]==dis[u]-cot[i] &amp;&amp; w[i] &amp;&amp; !vis[v])</span><br><span class="line">&#123;</span><br><span class="line">reg <span class="keyword">int</span> fl=Dfs(v,min(flow,w[i]));</span><br><span class="line"><span class="keyword">if</span>(fl)</span><br><span class="line">&#123;</span><br><span class="line">used+=fl;</span><br><span class="line">flow-=fl;</span><br><span class="line">w[i]-=fl;</span><br><span class="line">w[i^<span class="number">1</span>]+=fl;</span><br><span class="line"><span class="keyword">if</span>(!flow) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> used;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">void</span> <span class="title">zkwMCMF</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(Spfa())</span><br><span class="line">&#123;</span><br><span class="line">vis[T]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(vis[T])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memcpy</span>(cur,fst,<span class="keyword">sizeof</span>(fst));</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">reg <span class="keyword">int</span> fl=Dfs(S,inf);</span><br><span class="line">mincost+=dis[S]*fl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Link</span><span class="params">(reg <span class="keyword">int</span> l,reg <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line">reg <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>,tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=l;i&lt;=r;i++) t[++tot]=a[i];</span><br><span class="line">sort(t+<span class="number">1</span>,t+tot+<span class="number">1</span>);</span><br><span class="line">tot=unique(t+<span class="number">1</span>,t+tot+<span class="number">1</span>)-t<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;tot;i++)</span><br><span class="line">&#123;</span><br><span class="line">AddEdge(i+sum,i+sum+<span class="number">1</span>,inf,t[i+<span class="number">1</span>]-t[i]);</span><br><span class="line">AddEdge(i+sum+<span class="number">1</span>,i+sum,<span class="number">0</span>,t[i]-t[i+<span class="number">1</span>]);</span><br><span class="line">AddEdge(i+sum+<span class="number">1</span>,i+sum,inf,t[i+<span class="number">1</span>]-t[i]);</span><br><span class="line">AddEdge(i+sum,i+sum+<span class="number">1</span>,<span class="number">0</span>,t[i]-t[i+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=l;i&lt;=r;i++)</span><br><span class="line">&#123;</span><br><span class="line">reg <span class="keyword">int</span> pos=lower_bound(t+<span class="number">1</span>,t+tot+<span class="number">1</span>,a[i])-t;</span><br><span class="line"><span class="keyword">if</span>(i&lt;=mid)</span><br><span class="line">&#123;</span><br><span class="line">AddEdge(pos+sum,i+n,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">AddEdge(i+n,pos+sum,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">AddEdge(i,pos+sum,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">AddEdge(pos+sum,i,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sum+=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>,&amp;n,&amp;W);</span><br><span class="line">S=<span class="number">0</span>;</span><br><span class="line">T=n*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">sum=n*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">AddEdge(S,i,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">AddEdge(i,S,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">AddEdge(i,T,<span class="number">1</span>,W);</span><br><span class="line">AddEdge(T,i,<span class="number">0</span>,-W);</span><br><span class="line">AddEdge(i+n,T,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">AddEdge(T,i+n,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">Link(<span class="number">1</span>,n);</span><br><span class="line">zkwMCMF();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,mincost);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;费用流。&lt;/p&gt;
&lt;p&gt;$n$ 个排成一列的哨站要进行通信。第 $i$ 个哨站的频段为 $a_i$。&lt;/p&gt;
&lt;p&gt;每个哨站 $i$ 需要选择以下二者之一：&lt;/p&gt;
&lt;p&gt; 1.直接连接到控制中心，代价为 $W$；&lt;br&gt; 2.连接到前面的某个哨站 $j (j&amp;lt;i)$，代价为 $|a_i-a_j|$。 每个哨站只能被后面的至多一个哨站连接。&lt;/p&gt;
&lt;p&gt;请你求出最小可能的代价和。&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=28496172&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://VenusNero.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="费用流" scheme="http://VenusNero.github.io/tags/%E8%B4%B9%E7%94%A8%E6%B5%81/"/>
    
      <category term="分治" scheme="http://VenusNero.github.io/tags/%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>题解 P5323 [BJOI2019] 光线</title>
    <link href="http://VenusNero.github.io/2019/04/29/solution_p5323/"/>
    <id>http://VenusNero.github.io/2019/04/29/solution_p5323/</id>
    <published>2019-04-29T11:51:23.102Z</published>
    <updated>2019-04-29T11:56:03.810Z</updated>
    
    <content type="html"><![CDATA[<p>递推。</p><p>$n$ 片玻璃，每片玻璃的透光率为 $a_i\%$，反射率为 $b_i\%$，求 $1$ 单位的光照入后，能有多少光经过这 $n$ 片玻璃。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=60525&auto=0&height=66"></iframe><a id="more"></a><p>每片玻璃有反射和透过两种情况，每束光有从上方来和从下方来两种可能，看似情况非常多，但是我们可以分析一下，事实上最终一共只有两种情况：即光向上或向下，我们不妨令 $f[i]$ 表示第 $i$ 片玻璃向下的光，$g[i]$ 表示向上的光，那么可以得到两个显然的式子，即：</p><script type="math/tex; mode=display">f[i]=f[i-1]\times a[i]+g[i+1]\times b[i]</script><script type="math/tex; mode=display">g[i]=f[i-1]\times b[n]+g[i+1]\times a[i]</script><p>显然这个东西是不能直接递推求的，因为求第 $i$ 项要第 $i-1$ 和第 $i+1$ 项，我们考虑换一种思路，令 $f[i]$ 表示光从第 $1$ 到第 $i$ 片玻璃的透光率，$g[i]$ 表示光从第 $i$ 到第 $1$ 片玻璃的反光率，枚举光的反射次数为 $j$，可以得到：</p><script type="math/tex; mode=display">f[i]=f[i-1]\times a[i]\times \sum_{j=0}^{\infty}(g[i-1]\times b[i])^{j}</script><script type="math/tex; mode=display">g[i]=b[i]+g[i-1]\times a[i]^2\times \sum_{j=0}^{\infty}(g[i-1]\times b[i])^{j}</script><p>可以看出这是一个无限项的等比数列，而无限项等比数列 $a_n=a_{n-1}\times p$ 求和公式为（经百度）$\sum=\frac{a_{1}}{1-p}$，显然上面两个式子的公比 $p=g[i-1]\times b[i]$，所以我们可以得出：</p><script type="math/tex; mode=display">f[i]=\frac{f[i-1]\times a[i]}{1-p}</script><script type="math/tex; mode=display">g[i]=b[i]+\frac{g[i-1]\times a[i]^{2}}{1-p}</script><p>直接递推求解即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 500005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inl inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,a[MAXN],b[MAXN],f[MAXN],g[MAXN];</span><br><span class="line"><span class="function">inl <span class="keyword">int</span> <span class="title">Add</span><span class="params">(reg <span class="keyword">int</span> x,reg <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x+y&gt;Mod?x+y-Mod:x+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">int</span> <span class="title">Dec</span><span class="params">(reg <span class="keyword">int</span> x,reg <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x-y&lt;<span class="number">0</span>?x-y+Mod:x-y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">int</span> <span class="title">Mul</span><span class="params">(reg <span class="keyword">int</span> x,reg <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x*y-x*y/Mod*Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">int</span> <span class="title">Pow</span><span class="params">(reg <span class="keyword">int</span> x,reg <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">reg <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=Mul(x,x)) <span class="keyword">if</span>(y&amp;<span class="number">1</span>) res=Mul(res,x);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">reg <span class="keyword">int</span> inv=Pow(<span class="number">100</span>,Mod<span class="number">-2</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>,&amp;a[i],&amp;b[i]);</span><br><span class="line">a[i]=Mul(inv,a[i]);</span><br><span class="line">b[i]=Mul(inv,b[i]);</span><br><span class="line">&#125;</span><br><span class="line">f[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">reg <span class="keyword">int</span> p=Pow(Dec(<span class="number">1</span>,Mul(g[i<span class="number">-1</span>],b[i])),Mod<span class="number">-2</span>);</span><br><span class="line">f[i]=Mul(Mul(f[i<span class="number">-1</span>],a[i]),p);</span><br><span class="line">g[i]=Add(b[i],Mul(Mul(Mul(g[i<span class="number">-1</span>],a[i]),a[i]),p));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,f[n]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;递推。&lt;/p&gt;
&lt;p&gt;$n$ 片玻璃，每片玻璃的透光率为 $a_i\%$，反射率为 $b_i\%$，求 $1$ 单位的光照入后，能有多少光经过这 $n$ 片玻璃。&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=60525&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://VenusNero.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="递推" scheme="http://VenusNero.github.io/tags/%E9%80%92%E6%8E%A8/"/>
    
  </entry>
  
  <entry>
    <title>题解 P5305 [GXOI/GZOI2019]旧词</title>
    <link href="http://VenusNero.github.io/2019/04/17/solution_p5305/"/>
    <id>http://VenusNero.github.io/2019/04/17/solution_p5305/</id>
    <published>2019-04-17T13:49:00.120Z</published>
    <updated>2019-04-29T12:01:25.300Z</updated>
    
    <content type="html"><![CDATA[<p>树链剖分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我真傻，真的。我单知道 NOIP 会出原题，我没想到省选也会出原题。</span><br><span class="line">——鲁迅</span><br></pre></td></tr></table></figure><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=28138493&auto=0&height=66"></iframe><a id="more"></a><p>亲，这边建议去看一下 $\texttt{[LNOI2014]LCA}$ 呢。</p><p>考虑 $k=1$ 时，每次询问 $(x,y)$，可以考虑把 $\text{dep}$ 均摊到根到 $y$ 的路径上，然后可以直接查询，但是这样显然会变成 $\text{O}(n)$ 处理，我们反过来考虑，对 $x$ 进行处理，那么可以离线做，把询问排序，然后每个询问把所有 $i\in[1,x]$ 的点到根的权值都加 $1$，然后直接查询根到 $y$ 的权值和，所有 $x$ 相同的询问都可以一起处理。</p><p>那么要怎么扩展到 $k&gt;1$ 呢？我们分析一下 $k=1$ 时的本质，我们加上的这个 $1$ 其实就是 $\text{dep}_x-\text{dep}_{fa[x]}$，那么现在是 $\text{dep}^k$ 的情况，所以我们可以直接扩展到 $k$ 次的情况，即加上的就是 $\text{dep}_x^k-\text{dep}_{fa[x]}^k$，那么依然和 $k=1$ 时一样做，询问离线，然后把 $x$ 相等的一起处理了。不过这个 $\text{dep}_x^k-\text{dep}_{fa[x]}^k$ 需要预处理一下，不然处理非常麻烦。</p><p>算法当然就是树剖+线段树了。（听说 $\texttt{LCT}$ 也可以做，当然我是不会的）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 50005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inl inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> stc static</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">998244353</span>;</span><br><span class="line">stc <span class="keyword">int</span> cnt,fst[MAXN],nxt[MAXN&lt;&lt;<span class="number">1</span>],to[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line">stc <span class="keyword">int</span> n,q,k,a[MAXN],sum[MAXN],ans[MAXN];</span><br><span class="line"><span class="function">inl <span class="keyword">int</span> <span class="title">Add</span><span class="params">(reg <span class="keyword">int</span> x,reg <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x+y&gt;Mod?x+y-Mod:x+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">int</span> <span class="title">Dec</span><span class="params">(reg <span class="keyword">int</span> x,reg <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x-y&lt;<span class="number">0</span>?x-y+Mod:(x-y&gt;Mod?x-y-Mod:x-y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">int</span> <span class="title">Mul</span><span class="params">(reg <span class="keyword">int</span> x,reg <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x*y-x*y/Mod*Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">int</span> <span class="title">Pow</span><span class="params">(reg <span class="keyword">int</span> x,reg <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">reg <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>,x=Mul(x,x)) <span class="keyword">if</span>(y&amp;<span class="number">1</span>) res=Mul(res,x);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(reg <span class="keyword">int</span> u,reg <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to[++cnt]=v;</span><br><span class="line">nxt[cnt]=fst[u];</span><br><span class="line">fst[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function">inl <span class="keyword">void</span> <span class="title">Read</span><span class="params">(reg T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=<span class="number">0</span>;</span><br><span class="line">reg <span class="keyword">int</span> fu=<span class="number">1</span>;</span><br><span class="line">reg <span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) fu=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch<span class="number">-48</span>);</span><br><span class="line">x*=fu;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeSplit</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> t[MAXN&lt;&lt;<span class="number">2</span>],tag[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> siz[MAXN],son[MAXN],dfn[MAXN],Idx,top[MAXN],faz[MAXN],rk[MAXN],dep[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs1</span><span class="params">(reg <span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">siz[u]=<span class="number">1</span>;</span><br><span class="line">son[u]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=fst[u];i;i=nxt[i])</span><br><span class="line">&#123;</span><br><span class="line">reg <span class="keyword">int</span> v=to[i];</span><br><span class="line"><span class="keyword">if</span>(v==faz[u]) <span class="keyword">continue</span>;</span><br><span class="line">faz[v]=u;</span><br><span class="line">dep[v]=dep[u]+<span class="number">1</span>;</span><br><span class="line">Dfs1(v);</span><br><span class="line">siz[u]+=siz[v];</span><br><span class="line"><span class="keyword">if</span>(siz[v]&gt;siz[son[u]]) son[u]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs2</span><span class="params">(reg <span class="keyword">int</span> u,reg <span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dfn[u]=++Idx;</span><br><span class="line">rk[Idx]=u;</span><br><span class="line">top[u]=rt;</span><br><span class="line"><span class="keyword">if</span>(son[u]) Dfs2(son[u],rt);</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=fst[u];i;i=nxt[i])</span><br><span class="line">&#123;</span><br><span class="line">reg <span class="keyword">int</span> v=to[i];</span><br><span class="line"><span class="keyword">if</span>(v==son[u] || v==faz[u]) <span class="keyword">continue</span>;</span><br><span class="line">Dfs2(v,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(reg <span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t[rt]=Add(t[rt&lt;&lt;<span class="number">1</span>],t[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">void</span> <span class="title">PushDown</span><span class="params">(reg <span class="keyword">int</span> rt,reg <span class="keyword">int</span> l,reg <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tag[rt])</span><br><span class="line">&#123;</span><br><span class="line">reg <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">t[rt&lt;&lt;<span class="number">1</span>]=Add(t[rt&lt;&lt;<span class="number">1</span>],Mul(tag[rt],Dec(sum[mid],sum[l<span class="number">-1</span>])));</span><br><span class="line">t[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=Add(t[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>],Mul(tag[rt],Dec(sum[r],sum[mid])));</span><br><span class="line">tag[rt&lt;&lt;<span class="number">1</span>]=Add(tag[rt&lt;&lt;<span class="number">1</span>],tag[rt]);</span><br><span class="line">tag[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=Add(tag[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>],tag[rt]);</span><br><span class="line">tag[rt]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Modify</span><span class="params">(reg <span class="keyword">int</span> rt,reg <span class="keyword">int</span> l,reg <span class="keyword">int</span> r,reg <span class="keyword">int</span> tl,reg <span class="keyword">int</span> tr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=l &amp;&amp; r&lt;=tr)</span><br><span class="line">&#123;</span><br><span class="line">t[rt]=Add(t[rt],Dec(sum[r],sum[l<span class="number">-1</span>]));</span><br><span class="line">tag[rt]++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">reg <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">PushDown(rt,l,r);</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=mid) Modify(rt&lt;&lt;<span class="number">1</span>,l,mid,tl,tr);</span><br><span class="line"><span class="keyword">if</span>(tr&gt;mid) Modify(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,tl,tr);</span><br><span class="line">PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(reg <span class="keyword">int</span> rt,reg <span class="keyword">int</span> l,reg <span class="keyword">int</span> r,reg <span class="keyword">int</span> tl,reg <span class="keyword">int</span> tr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=l &amp;&amp; r&lt;=tr) <span class="keyword">return</span> t[rt];</span><br><span class="line">reg <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>,res=<span class="number">0</span>;</span><br><span class="line">PushDown(rt,l,r);</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=mid) res=Add(res,Query(rt&lt;&lt;<span class="number">1</span>,l,mid,tl,tr));</span><br><span class="line"><span class="keyword">if</span>(tr&gt;mid) res=Add(res,Query(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,tl,tr));</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">void</span> <span class="title">Mdy</span><span class="params">(reg <span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;u;u=faz[top[u]]) Modify(<span class="number">1</span>,<span class="number">1</span>,n,dfn[top[u]],dfn[u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">int</span> <span class="title">Qry</span><span class="params">(reg <span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">reg <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;u;u=faz[top[u]]) res=Add(res,Query(<span class="number">1</span>,<span class="number">1</span>,n,dfn[top[u]],dfn[u]));</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;T;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> v,id;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span> &lt;Query&gt; vec[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Read(n);</span><br><span class="line">Read(q);</span><br><span class="line">Read(k);</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">Read(T.faz[i]);</span><br><span class="line">AddEdge(T.faz[i],i);</span><br><span class="line">AddEdge(i,T.faz[i]);</span><br><span class="line">&#125;</span><br><span class="line">T.dep[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">T.Dfs1(<span class="number">1</span>);</span><br><span class="line">T.Dfs2(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=Dec(Pow(T.dep[i],k),Pow(T.dep[i]<span class="number">-1</span>,k));</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) sum[i]=Add(sum[i<span class="number">-1</span>],a[T.rk[i]]);</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">&#123;</span><br><span class="line">reg <span class="keyword">int</span> x,y;</span><br><span class="line">Read(x);</span><br><span class="line">Read(y);</span><br><span class="line">vec[x].push_back((Query)&#123;y,i&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">T.Mdy(i);</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;(<span class="keyword">int</span>)vec[i].size();j++) ans[vec[i][j].id]=T.Qry(vec[i][j].v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;树链剖分。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;我真傻，真的。我单知道 NOIP 会出原题，我没想到省选也会出原题。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;——鲁迅&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=28138493&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://VenusNero.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="树链剖分" scheme="http://VenusNero.github.io/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>题解 P5304 [GXOI/GZOI2019]旅行者</title>
    <link href="http://VenusNero.github.io/2019/04/17/solution_p5304/"/>
    <id>http://VenusNero.github.io/2019/04/17/solution_p5304/</id>
    <published>2019-04-17T13:28:23.297Z</published>
    <updated>2019-04-29T12:01:25.636Z</updated>
    
    <content type="html"><![CDATA[<p>Dijkstra。</p><p>这道题目简直是弟弟级别的……</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=410042097&auto=0&height=66"></iframe><a id="more"></a><p>考虑每条边 $(u,v,w)$ 的贡献，我们可以处理出城市中离 $u$ 最近的距离为 $dis_1$，离 $v$ 最近的距离为 $dis_2$，那么这条边的权值就是 $dis_1+dis_2+w$，然后找到最短的一条就行了。</p><p>同时，我们还要记录这个城市的编号，如果两个城市相同，那么相当于走了一个环回到其本身了，不能计入答案。</p><p>正反跑两边 Dijkstra，分别染色。染色也就是在跑 Dijkstra 的过程中记录离这个点最近的城市，具体可以见代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXM 500005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inl inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> cnt,fst[MAXN],to[MAXM],nxt[MAXM],w[MAXM];</span><br><span class="line"><span class="keyword">int</span> n,m,k,col[<span class="number">2</span>][MAXN],a[MAXN],fr[MAXM],tx[MAXM],ww[MAXM];</span><br><span class="line">ll dis[<span class="number">2</span>][MAXM];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> u;</span><br><span class="line">ll dis;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;x) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x.dis&lt;dis;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue &lt;Node&gt; q;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function">inl <span class="keyword">void</span> <span class="title">Read</span><span class="params">(reg T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=<span class="number">0</span>;</span><br><span class="line">reg <span class="keyword">int</span> fu=<span class="number">1</span>;</span><br><span class="line">reg <span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) fu=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch<span class="number">-48</span>);</span><br><span class="line">x*=fu;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(reg <span class="keyword">int</span> u,reg <span class="keyword">int</span> v,reg <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to[++cnt]=v;</span><br><span class="line">nxt[cnt]=fst[u];</span><br><span class="line">fst[u]=cnt;</span><br><span class="line">w[cnt]=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(reg <span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dis[id],<span class="number">60</span>,<span class="keyword">sizeof</span>(dis[id]));</span><br><span class="line"><span class="built_in">memset</span>(col[id],<span class="number">0</span>,<span class="keyword">sizeof</span>(col[id]));</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">&#123;</span><br><span class="line">dis[id][a[i]]=<span class="number">0</span>;</span><br><span class="line">col[id][a[i]]=a[i];</span><br><span class="line">q.push((Node)&#123;a[i],<span class="number">0</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">reg Node now=q.top();</span><br><span class="line">q.pop();</span><br><span class="line">reg <span class="keyword">int</span> u=now.u;</span><br><span class="line">reg ll d=now.dis;</span><br><span class="line"><span class="keyword">if</span>(d!=dis[id][u]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=fst[u];i;i=nxt[i])</span><br><span class="line">&#123;</span><br><span class="line">reg <span class="keyword">int</span> v=to[i];</span><br><span class="line"><span class="keyword">if</span>(dis[id][v]&gt;dis[id][u]+w[i])</span><br><span class="line">&#123;</span><br><span class="line">dis[id][v]=dis[id][u]+w[i];</span><br><span class="line">col[id][v]=col[id][u];</span><br><span class="line">q.push((Node)&#123;v,dis[id][v]&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> Time;</span><br><span class="line">Read(Time);</span><br><span class="line"><span class="keyword">while</span>(Time--)</span><br><span class="line">&#123;</span><br><span class="line">cnt=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(fst,<span class="number">0</span>,<span class="keyword">sizeof</span>(fst));</span><br><span class="line">Read(n);</span><br><span class="line">Read(m);</span><br><span class="line">Read(k);</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line">Read(x);</span><br><span class="line">Read(y);</span><br><span class="line">Read(z);</span><br><span class="line">fr[i]=x;</span><br><span class="line">tx[i]=y;</span><br><span class="line">ww[i]=z;</span><br><span class="line"><span class="keyword">if</span>(x^y) AddEdge(x,y,z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++) Read(a[i]);</span><br><span class="line">Dijkstra(<span class="number">0</span>);</span><br><span class="line">cnt=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(fst,<span class="number">0</span>,<span class="keyword">sizeof</span>(fst));</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="keyword">if</span>(fr[i]^tx[i]) AddEdge(tx[i],fr[i],ww[i]);</span><br><span class="line">Dijkstra(<span class="number">1</span>);</span><br><span class="line">reg ll ans=<span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">reg <span class="keyword">int</span> u=fr[i],v=tx[i],c=ww[i];</span><br><span class="line"><span class="keyword">if</span>(col[<span class="number">0</span>][u] &amp;&amp; col[<span class="number">1</span>][v] &amp;&amp; col[<span class="number">0</span>][u]!=col[<span class="number">1</span>][v]) ans=min(ans,dis[<span class="number">0</span>][u]+dis[<span class="number">1</span>][v]+c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Dijkstra。&lt;/p&gt;
&lt;p&gt;这道题目简直是弟弟级别的……&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=410042097&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://VenusNero.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="最短路" scheme="http://VenusNero.github.io/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>About Me</title>
    <link href="http://VenusNero.github.io/2019/04/16/about_me/"/>
    <id>http://VenusNero.github.io/2019/04/16/about_me/</id>
    <published>2019-04-16T11:30:03.081Z</published>
    <updated>2019-04-29T12:02:17.331Z</updated>
    
    <content type="html"><![CDATA[<h2 id="我是谁？"><a href="#我是谁？" class="headerlink" title="我是谁？"></a>我是谁？</h2><p>ZJ 最菜的菜鸡，被各种吊打。</p><a id="more"></a><h3 id="「愿你唱遍梨园繁华，回首依然笑靥如花」"><a href="#「愿你唱遍梨园繁华，回首依然笑靥如花」" class="headerlink" title="「愿你唱遍梨园繁华，回首依然笑靥如花」"></a>「愿你唱遍梨园繁华，回首依然笑靥如花」</h3><iframe src="//player.bilibili.com/player.html?aid=36570707&cid=74641034&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="min-height:450px;min-width:600px;"> </iframe><h2 id="个人信息（伪）"><a href="#个人信息（伪）" class="headerlink" title="个人信息（伪）"></a>个人信息（伪）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">各种地方的 ID：Venus / VenusNero / DKACVenus / VenusNer0</span><br><span class="line">（其中 DKACVenus 非常少用，VenusNer0 是 ubisoft 专属qwq）</span><br><span class="line">QQ：2314701302（工作日用）/ 953854419（假期用）</span><br><span class="line">爱好：写代码 / FGO</span><br><span class="line">码风：大括号换行</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;我是谁？&quot;&gt;&lt;a href=&quot;#我是谁？&quot; class=&quot;headerlink&quot; title=&quot;我是谁？&quot;&gt;&lt;/a&gt;我是谁？&lt;/h2&gt;&lt;p&gt;ZJ 最菜的菜鸡，被各种吊打。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>题解 P4151 [WC2011]最大XOR和路径</title>
    <link href="http://VenusNero.github.io/2019/04/15/solution_p4151/"/>
    <id>http://VenusNero.github.io/2019/04/15/solution_p4151/</id>
    <published>2019-04-15T13:50:21.870Z</published>
    <updated>2019-04-29T12:01:26.429Z</updated>
    
    <content type="html"><![CDATA[<p>线性基 + 搜索。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">考虑一个边权为非负整数的无向连通图，节点编号为 1 到 N，试求出一条从 1 号节点到 N 号节点的路径，使得路径上经过的边的权值的 XOR 和最大。</span><br><span class="line"></span><br><span class="line">路径可以重复经过某些点或边，当一条边在路径中出现了多次时，其权值在计算 XOR 和时也要被计算相应多的次数，具体见样例。</span><br></pre></td></tr></table></figure><p>智推几度推到此题，奈何当时惧于题目难度没有细做，今日无意间又做此题，方才发现——</p><p><del>这 TM 不一 ** 题吗</del></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=489092574&auto=0&height=66"></iframe><a id="more"></a><p>说回这道题，要使路径的异或和最大，说到异或和，就想起线性基。<del>再次两开花</del></p><p>题目说可以在环上走来走去，那么我们就考虑在每个环上走来走去产生的影响，显然，影响就相当于异或上这个环的异或和，所以我们考虑处理出每个环的异或和，把它丢到线性基里面去，最后计算一遍就可以带走这道题了。</p><p><del>感觉是黑题里最简单的那种了</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 50005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXM 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> K 60</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inl inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> stc static</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">stc <span class="keyword">int</span> cnt,fst[MAXN],to[MAXM&lt;&lt;<span class="number">1</span>],nxt[MAXM&lt;&lt;<span class="number">1</span>];</span><br><span class="line">stc <span class="keyword">int</span> n,m;</span><br><span class="line">stc ll dis[MAXN],w[MAXM&lt;&lt;<span class="number">1</span>],p[K&lt;&lt;<span class="number">1</span>];</span><br><span class="line">stc <span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function">inl <span class="keyword">void</span> <span class="title">Read</span><span class="params">(reg T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=<span class="number">0</span>;</span><br><span class="line">reg <span class="keyword">int</span> fu=<span class="number">1</span>;</span><br><span class="line">reg <span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) fu=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch<span class="number">-48</span>);</span><br><span class="line">x*=fu;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(reg <span class="keyword">int</span> u,reg <span class="keyword">int</span> v,reg ll c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to[++cnt]=v;</span><br><span class="line">nxt[cnt]=fst[u];</span><br><span class="line">fst[u]=cnt;</span><br><span class="line">w[cnt]=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">void</span> <span class="title">Modify</span><span class="params">(reg ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=K;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x&amp;(<span class="number">1l</span>l&lt;&lt;i))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p[i]) x^=p[i];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">p[i]=x;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(reg <span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vis[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=fst[u];i;i=nxt[i])</span><br><span class="line">&#123;</span><br><span class="line">reg <span class="keyword">int</span> v=to[i];</span><br><span class="line"><span class="keyword">if</span>(vis[v]) Modify(dis[u]^dis[v]^w[i]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">dis[v]=dis[u]^w[i];</span><br><span class="line">Dfs(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl ll <span class="title">Query</span><span class="params">(reg ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">reg ll res=x;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=K;i&gt;=<span class="number">0</span>;i--) <span class="keyword">if</span>((res^p[i])&gt;res) res^=p[i];</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Read(n);</span><br><span class="line">Read(m);</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">reg <span class="keyword">int</span> x,y;</span><br><span class="line">reg ll z;</span><br><span class="line">Read(x);</span><br><span class="line">Read(y);</span><br><span class="line">Read(z);</span><br><span class="line">AddEdge(x,y,z);</span><br><span class="line">AddEdge(y,x,z);</span><br><span class="line">&#125;</span><br><span class="line">Dfs(<span class="number">1</span>);</span><br><span class="line">ll ans=Query(dis[n]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;线性基 + 搜索。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;考虑一个边权为非负整数的无向连通图，节点编号为 1 到 N，试求出一条从 1 号节点到 N 号节点的路径，使得路径上经过的边的权值的 XOR 和最大。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;路径可以重复经过某些点或边，当一条边在路径中出现了多次时，其权值在计算 XOR 和时也要被计算相应多的次数，具体见样例。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;智推几度推到此题，奈何当时惧于题目难度没有细做，今日无意间又做此题，方才发现——&lt;/p&gt;
&lt;p&gt;&lt;del&gt;这 TM 不一 ** 题吗&lt;/del&gt;&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=489092574&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://VenusNero.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Dfs" scheme="http://VenusNero.github.io/tags/Dfs/"/>
    
      <category term="线性基" scheme="http://VenusNero.github.io/tags/%E7%BA%BF%E6%80%A7%E5%9F%BA/"/>
    
  </entry>
  
  <entry>
    <title>题解 模拟赛 4-9</title>
    <link href="http://VenusNero.github.io/2019/04/09/solution_2019_4_9/"/>
    <id>http://VenusNero.github.io/2019/04/09/solution_2019_4_9/</id>
    <published>2019-04-09T10:25:16.038Z</published>
    <updated>2019-04-29T12:01:29.955Z</updated>
    
    <content type="html"><![CDATA[<p>有点菜，$100+100+80=280$，第三题因为太麻瓜了没 AC，不然就 AK 了。</p><p>隔壁的 Sinner AK 了，Orz。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=101106&auto=0&height=66"></iframe><a id="more"></a><hr><h1 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h1><p>$n$ 只有 $7$，每个根也不过 $[1,20]$，范围非常小。那么现在最大的问题就是判重根。</p><p>考虑一个数 $x$ 是方程 $f(x)=0$ 的根的条件是对于 $f$ 的 $0$ ~ $k-1$ 阶导数都有 $f’(x)=0$，所以我们可以直接枚举它的所有导数进行计算。</p><p>至于如何求导，多项式的求导谁应该都会。实在不行可以看一下“多项式算法学习笔记”。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 15</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> K 20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inl inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> stc static</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="comment">//#define getchar() (p1==p2 &amp;&amp; (p2=(p1=buf)+fread(buf,1,1&lt;&lt;21,stdin),p1==p2)?EOF:*p1++)</span></span><br><span class="line">stc <span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p1=buf,*p2=buf;</span><br><span class="line">stc <span class="keyword">int</span> n,a[MAXN],sum[K+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function">inl <span class="keyword">void</span> <span class="title">Read</span><span class="params">(reg T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=<span class="number">0</span>;</span><br><span class="line">reg <span class="keyword">int</span> fu=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) fu=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch<span class="number">-48</span>);</span><br><span class="line">x*=fu;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function">inl T <span class="title">Max</span><span class="params">(reg T x,reg T y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&gt;y?x:y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function">inl T <span class="title">Min</span><span class="params">(reg T x,reg T y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&lt;y?x:y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">void</span> <span class="title">GetDev</span><span class="params">(reg <span class="keyword">int</span> *A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) A[i<span class="number">-1</span>]=A[i]*i;</span><br><span class="line">A[n]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">int</span> <span class="title">QuickPow</span><span class="params">(reg <span class="keyword">int</span> x,reg <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">reg <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(y&amp;<span class="number">1</span>) res=res*x;</span><br><span class="line">x=x*x;</span><br><span class="line">y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">int</span> <span class="title">Calc</span><span class="params">(reg <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) res+=a[i]*QuickPow(x,i);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Read(n);</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) Read(a[i]);</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">0</span>;n&gt;=<span class="number">1</span>;n--,i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=K;j++) <span class="keyword">if</span>(sum[j]==i &amp;&amp; !Calc(j)) sum[j]++;</span><br><span class="line">GetDev(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=K;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(;sum[i];sum[i]--) <span class="built_in">printf</span>(<span class="string">"%lld "</span>,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h1><p>见到“配对”，就想到二分图匹配。<del>两开花</del></p><p>那么就可以开始搞了。考虑先筛出质数，然后将奇数和偶数分别作为左右点（因为奇数加偶数一定是奇数，大于 $2$ 的数只有奇数是质数），然后爆枚每两个数，加起来是质数就连一条边，最后可以用网络流或者匈牙利一波带走。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 5005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> K 3000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 2147483647</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inl inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> stc static</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">stc <span class="keyword">int</span> cnt=<span class="number">1</span>,fst[MAXN],nxt[MAXN&lt;&lt;<span class="number">1</span>],to[MAXN&lt;&lt;<span class="number">1</span>],w[MAXN&lt;&lt;<span class="number">1</span>],cur[MAXN];</span><br><span class="line">stc <span class="keyword">int</span> n,a[MAXN],pri[MAXN+<span class="number">5</span>],tot,S,T,dep[MAXN];</span><br><span class="line">stc <span class="keyword">bool</span> isp[MAXN+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function">inl <span class="keyword">void</span> <span class="title">Read</span><span class="params">(reg T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=<span class="number">0</span>;</span><br><span class="line">reg <span class="keyword">int</span> fu=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) fu=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch<span class="number">-48</span>);</span><br><span class="line">x*=fu;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(reg <span class="keyword">int</span> u,reg <span class="keyword">int</span> v,reg <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">to[++cnt]=v;</span><br><span class="line">nxt[cnt]=fst[u];</span><br><span class="line">fst[u]=cnt;</span><br><span class="line">w[cnt]=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">bool</span> <span class="title">Bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span>(dep));</span><br><span class="line">q.push(S);</span><br><span class="line">dep[S]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">reg <span class="keyword">int</span> u=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=fst[u];i;i=nxt[i])</span><br><span class="line">&#123;</span><br><span class="line">reg <span class="keyword">int</span> v=to[i];</span><br><span class="line"><span class="keyword">if</span>(!dep[v] &amp;&amp; w[i])</span><br><span class="line">&#123;</span><br><span class="line">dep[v]=dep[u]+<span class="number">1</span>;</span><br><span class="line">q.push(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dep[T];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> flow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(u==T || !flow) <span class="keyword">return</span> flow;</span><br><span class="line">reg <span class="keyword">int</span> used=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> &amp;i=cur[u];i;i=nxt[i])</span><br><span class="line">&#123;</span><br><span class="line">reg <span class="keyword">int</span> v=to[i];</span><br><span class="line"><span class="keyword">if</span>(dep[v]==dep[u]+<span class="number">1</span> &amp;&amp; w[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> fl=Dfs(v,min(flow,w[i]));</span><br><span class="line"><span class="keyword">if</span>(fl)</span><br><span class="line">&#123;</span><br><span class="line">used+=fl;</span><br><span class="line">flow-=fl;</span><br><span class="line">w[i]-=fl;</span><br><span class="line">w[i^<span class="number">1</span>]+=fl;</span><br><span class="line"><span class="keyword">if</span>(!flow) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> used;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">int</span> <span class="title">Dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(Bfs())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memcpy</span>(cur,fst,<span class="keyword">sizeof</span>(fst));</span><br><span class="line">res+=Dfs(S,inf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">void</span> <span class="title">GetPrime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=K;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!isp[i]) pri[++tot]=i;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=tot &amp;&amp; i*pri[j]&lt;=K;j++)</span><br><span class="line">&#123;</span><br><span class="line">isp[i*pri[j]]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!(i%pri[j])) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GetPrime();</span><br><span class="line">Read(n);</span><br><span class="line">S=<span class="number">0</span>;</span><br><span class="line">T=n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) Read(a[i]);</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]%<span class="number">2</span> &amp;&amp; !(a[j]%<span class="number">2</span>) &amp;&amp; !isp[a[i]+a[j]])</span><br><span class="line">&#123;</span><br><span class="line">AddEdge(i,j,<span class="number">1</span>);</span><br><span class="line">AddEdge(j,i,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&amp;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">AddEdge(S,i,<span class="number">1</span>);</span><br><span class="line">AddEdge(i,S,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">AddEdge(i,T,<span class="number">1</span>);</span><br><span class="line">AddEdge(T,i,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">reg <span class="keyword">int</span> ans=Dinic();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h1><p>爆枚打出哪一张麻将，然后再爆枚抽到哪一张麻将，判断一下能不能胡，能的话就计算一下牌堆里还有几张，加到答案里就行了。</p><p>（判胡应该是要用爆搜的，但是当时脑残了没有用，所以没有满分）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 205</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inl inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> stc static</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> num,opt;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;x,<span class="keyword">const</span> Node &amp;y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x.opt==y.opt?x.num&lt;y.num:x.opt&lt;y.opt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> Node &amp;x,<span class="keyword">const</span> Node &amp;y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x.opt==y.opt &amp;&amp; x.num==y.num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*void out()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">printf(" $ : %d %s\n",num,opt==1?"Íò":(opt==2?"Í²":"Ìõ"));</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">&#125;a[MAXN],t[MAXN],q[MAXN];</span><br><span class="line">stc <span class="keyword">int</span> n=<span class="number">14</span>,m=<span class="number">12</span>,ans,maxn,tot;</span><br><span class="line">stc <span class="keyword">bool</span> used[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sort(t+<span class="number">1</span>,t+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> p=<span class="number">1</span>;p&lt;=n;p++)<span class="comment">//Ã¶¾Ù p Îª½«ÅÆ </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(used,<span class="number">0</span>,<span class="keyword">sizeof</span>(used));</span><br><span class="line">used[p]=<span class="number">1</span>;</span><br><span class="line">reg <span class="keyword">bool</span> fg=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> r=<span class="number">1</span>;r&lt;=n;r++)<span class="comment">//ÕÒµ½ÏàÍ¬ÅÆ </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(t[p]==t[r] &amp;&amp; p!=r)</span><br><span class="line">&#123;</span><br><span class="line">used[r]=<span class="number">1</span>;</span><br><span class="line">fg=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!fg) <span class="keyword">continue</span>;</span><br><span class="line">tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(!used[i]) q[++tot]=t[i];</span><br><span class="line">sort(q+<span class="number">1</span>,q+m+<span class="number">1</span>);</span><br><span class="line">fg=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m;i+=<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(q[i].opt!=q[i<span class="number">-1</span>].opt || q[i].opt!=q[i+<span class="number">1</span>].opt)</span><br><span class="line">&#123;</span><br><span class="line">fg=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((q[i].num==q[i<span class="number">-1</span>].num &amp;&amp; q[i].num==q[i+<span class="number">1</span>].num) || (q[i].num==q[i<span class="number">-1</span>].num+<span class="number">1</span> &amp;&amp; q[i].num==q[i+<span class="number">1</span>].num<span class="number">-1</span>));</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">fg=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!fg)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*printf("  µ±Ç°ÅÆÎª : ");</span></span><br><span class="line"><span class="comment">for(reg int i=1;i&lt;=m;i++) printf(" %d %s ",q[i].num,q[i].opt==1?"Íò":(q[i].opt==2?"Í²":"Ìõ"));</span></span><br><span class="line"><span class="comment">puts("");</span></span><br><span class="line"><span class="comment">printf("  @ ½«ÅÆÎª : %d %s\n\n",t[p].num,t[p].opt==1?"Íò":(t[p].opt==2?"Í²":"Ìõ"));*/</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 1£ºÍò 2£ºÍ² 3£ºÌõ </span></span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%c"</span>,&amp;x,&amp;ch);</span><br><span class="line">a[i].num=x;</span><br><span class="line"><span class="keyword">if</span>(ch==<span class="string">'w'</span>) a[i].opt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">'p'</span>) a[i].opt=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">'s'</span>) a[i].opt=<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//printf("  ´ò³ö : %d\n\n",i);</span></span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">9</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">3</span>;k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memcpy</span>(t,a,<span class="keyword">sizeof</span>(a));</span><br><span class="line">t[i].num=j;</span><br><span class="line">t[i].opt=k;</span><br><span class="line">reg <span class="keyword">bool</span> fg=Check();</span><br><span class="line"><span class="keyword">if</span>(fg)</span><br><span class="line">&#123;</span><br><span class="line">reg <span class="keyword">int</span> sum=<span class="number">4</span>;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> l=<span class="number">1</span>;l&lt;=n;l++) <span class="keyword">if</span>(l!=i &amp;&amp; a[l].opt==k &amp;&amp; a[l].num==j) sum--;</span><br><span class="line">res+=sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(res&gt;maxn)</span><br><span class="line">&#123;</span><br><span class="line">ans=i;</span><br><span class="line">maxn=res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,ans,maxn);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有点菜，$100+100+80=280$，第三题因为太麻瓜了没 AC，不然就 AK 了。&lt;/p&gt;
&lt;p&gt;隔壁的 Sinner AK 了，Orz。&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=101106&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;
    
    </summary>
    
    
      <category term="数论" scheme="http://VenusNero.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="题解" scheme="http://VenusNero.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="爆搜" scheme="http://VenusNero.github.io/tags/%E7%88%86%E6%90%9C/"/>
    
      <category term="模拟赛" scheme="http://VenusNero.github.io/tags/%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    
      <category term="二分图匹配" scheme="http://VenusNero.github.io/tags/%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>题解 P5280 [ZJOI2019]线段树</title>
    <link href="http://VenusNero.github.io/2019/04/02/solution_p5280/"/>
    <id>http://VenusNero.github.io/2019/04/02/solution_p5280/</id>
    <published>2019-04-02T14:24:01.413Z</published>
    <updated>2019-04-29T12:01:26.010Z</updated>
    
    <content type="html"><![CDATA[<p>DP + 线段树。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=101085&auto=0&height=66"></iframe><a id="more"></a><p>神仙题啊神仙题……我这种蒟蒻赛场上啥也不会，打了一个 $20$ 分的暴力就滚粗了……DP 有一点苗头但是因为我是 DP 低能儿，所以推式子什么的还是不大可能的……</p><p>赛后在各路神仙的帮助下总算是搞懂了一些……</p><p>Sooke 把点分成了 $5$ 种，但其实也可以分成 $4$ 种。</p><p>令操作区间为 $[tl,tr]$，线段树上当前节点为 $[l,r]$，则：</p><ol><li><p>节点会被访问，即 $tl\leq l\leq r\leq tr$，显然它一定是 $1$，所以它的贡献要加上 $2^{i-1}$（$i$ 为操作编号）。</p></li><li><p>节点未被访问，即未被修改或下传，显然其贡献不变，而因为线段树的数量翻倍，则其贡献 $\times 2$。</p></li><li><p>该节点为 $1.$ 类的祖先，则其显然会在当前操作中被下放，所以贡献不变。</p></li><li><p>只被下放，但没有访问过的结点。对于这种点，我们令 $f_i$ 表示使 $i$ 到根节点存在 $1$ 的操作情况数，而这些点的贡献需要加上 $f_i$。</p></li></ol><p>显然，只要能够维护 $f$，那么 $1,3,4$ 操作都可以 $\log n$ 维护，我们考虑 $1,3$ 操作产生的贡献 $sum$，那么 $ans$ 只需要更新为 $(ans-sum)\times 2+sum$ 即可，这样相当于直接 $\times 2$，就不用考虑 $2$ 操作了。</p><p>那么问题回到如何处理 $f$，其实也非常简单，对于 $1.$，我们直接加上 $2^{i-1}$，因为它自己就是 $1$；对于 $2,4$，因为复制前后都不变，所以 $\times 2$ 即可；而对于 $3$，显然它和它的祖先都是 $0$，所以不变。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inl inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="comment">//#define getchar() (p1==p2 &amp;&amp; (p2=(p1=buf)+fread(buf,1,1&lt;&lt;21,stdin),p1==p2)?EOF:*p1++)</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p1=buf,*p2=buf;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,T,t[MAXN&lt;&lt;<span class="number">2</span>],f[MAXN&lt;&lt;<span class="number">2</span>],tag[MAXN&lt;&lt;<span class="number">2</span>],taga[MAXN&lt;&lt;<span class="number">2</span>],tagm[MAXN&lt;&lt;<span class="number">2</span>],ans,sum;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function">inl <span class="keyword">void</span> <span class="title">Read</span><span class="params">(reg T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=<span class="number">0</span>;</span><br><span class="line">reg <span class="keyword">int</span> fu=<span class="number">1</span>;</span><br><span class="line">reg <span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) fu=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch<span class="number">-48</span>);</span><br><span class="line">x*=fu;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">int</span> <span class="title">Add</span><span class="params">(reg <span class="keyword">int</span> x,reg <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x+y&gt;Mod?x+y-Mod:x+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">int</span> <span class="title">Dec</span><span class="params">(reg <span class="keyword">int</span> x,reg <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x-y&lt;<span class="number">0</span>?x-y+Mod:x-y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">int</span> <span class="title">Mul</span><span class="params">(reg <span class="keyword">int</span> x,reg <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x*y-x*y/Mod*Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">void</span> <span class="title">MulT</span><span class="params">(reg <span class="keyword">int</span> rt,reg <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t[rt]=Mul(t[rt],x);</span><br><span class="line">tagm[rt]=Mul(tagm[rt],x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">void</span> <span class="title">MulF</span><span class="params">(reg <span class="keyword">int</span> rt,reg <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">f[rt]=Mul(f[rt],x);</span><br><span class="line">tag[rt]=Mul(tag[rt],x);</span><br><span class="line">taga[rt]=Mul(taga[rt],x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">void</span> <span class="title">AddF</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">f[rt]=Add(f[rt],x);</span><br><span class="line">taga[rt]=Add(taga[rt],x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">inl <span class="keyword">void</span> <span class="title">PushDown</span><span class="params">(reg <span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tagm[rt]&gt;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">MulT(rt&lt;&lt;<span class="number">1</span>,tagm[rt]);</span><br><span class="line">MulT(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,tagm[rt]);</span><br><span class="line">tagm[rt]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tag[rt]&gt;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">MulF(rt&lt;&lt;<span class="number">1</span>,tag[rt]);</span><br><span class="line">MulF(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,tag[rt]);</span><br><span class="line">tag[rt]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(taga[rt])</span><br><span class="line">&#123;</span><br><span class="line">AddF(rt&lt;&lt;<span class="number">1</span>,taga[rt]);</span><br><span class="line">AddF(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,taga[rt]);</span><br><span class="line">taga[rt]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Modify</span><span class="params">(reg <span class="keyword">int</span> rt,reg <span class="keyword">int</span> l,reg <span class="keyword">int</span> r,reg <span class="keyword">int</span> tl,reg <span class="keyword">int</span> tr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tl&lt;=l &amp;&amp; r&lt;=tr)</span><br><span class="line">&#123;</span><br><span class="line">ans=Dec(ans,t[rt]);</span><br><span class="line">t[rt]=Add(t[rt],T);</span><br><span class="line">tagm[rt]=Mul(tagm[rt],<span class="number">2</span>);</span><br><span class="line">AddF(rt,T);</span><br><span class="line">sum=Add(sum,t[rt]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tl&gt;r || l&gt;tr)</span><br><span class="line">&#123;</span><br><span class="line">ans=Dec(ans,t[rt]);</span><br><span class="line">t[rt]=Add(t[rt],f[rt]);</span><br><span class="line">tagm[rt]=Mul(tagm[rt],<span class="number">2</span>);</span><br><span class="line">MulF(rt,<span class="number">2</span>);</span><br><span class="line">sum=Add(sum,t[rt]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">reg <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">PushDown(rt);</span><br><span class="line">ans=Dec(ans,t[rt]);</span><br><span class="line">sum=Add(sum,t[rt]);</span><br><span class="line">Modify(rt&lt;&lt;<span class="number">1</span>,l,mid,tl,tr);</span><br><span class="line">Modify(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,tl,tr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Read(n);</span><br><span class="line">Read(m);</span><br><span class="line">T=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n*<span class="number">4</span>;i++) tag[i]=tagm[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line">reg <span class="keyword">int</span> opt,x,y;</span><br><span class="line">Read(opt);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">Read(x);</span><br><span class="line">Read(y);</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line">Modify(<span class="number">1</span>,<span class="number">1</span>,n,x,y);</span><br><span class="line">ans=Add(Mul(ans,<span class="number">2</span>),sum);</span><br><span class="line">T=Mul(T,<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DP + 线段树。&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=101085&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://VenusNero.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="DP" scheme="http://VenusNero.github.io/tags/DP/"/>
    
      <category term="线段树" scheme="http://VenusNero.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>梦想与现实的交点——浙江省选 2019 游记</title>
    <link href="http://VenusNero.github.io/2019/03/28/ZJOI_2019/"/>
    <id>http://VenusNero.github.io/2019/03/28/ZJOI_2019/</id>
    <published>2019-03-28T09:47:51.579Z</published>
    <updated>2019-05-12T07:14:07.675Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一试"><a href="#一试" class="headerlink" title="一试"></a>一试</h1><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今年菜爆啦，只能以非正式选手的身份去玩了，对自己来说只能算是和好久没见到的小伙伴的面基会了。</p><p>还可以找到失踪的 SaoFish。</p><p>咱机房还是有几位正式选手的，希望他们能进队吖。（奶* 1）</p><a id="more"></a><hr><h1 id="Day-3"><a href="#Day-3" class="headerlink" title="Day -3"></a>Day -3</h1><p>吃完饭 zjq 突然和我说：你不能去玩了。</p><p>心里一惊：wtf？不能去省选了？月考怎么办要死人的woc</p><p>回机房，发现老师把名单发群里了，最后那个是我（我是最菜的）。</p><p>问候了 zjq 一顿，其还美其名曰“惊喜”，惊的我 TM 都快吓死。</p><p>这两天 zjq 和 bzt 天天早上在机房里做♂题，估计已经强到不行了。（奶* 2）</p><p>找 ljx 扯了两句，得知 LJ 和其住同一个宾馆，大写的惨字。</p><hr><h1 id="Day-2"><a href="#Day-2" class="headerlink" title="Day -2"></a>Day -2</h1><p>没干啥事，放学直接回家玩了。</p><hr><h1 id="Day-1"><a href="#Day-1" class="headerlink" title="Day -1"></a>Day -1</h1><p>水了一天的全民 K 歌的抢麦，真 TM 好玩，还有小姐姐说我声音好听，有点开心。</p><p>准备东西ing，把之前被某人拍坏后来修好的 mac 拿来用了，敲着这个贼爽的键盘，真是 high 到不行了。</p><p>lhy 过来问多项式 $\exp$ 的问题，然而并不会，所以先 %%%lhy 了。</p><p>记得去年 Sooke 说啥都听不懂，还在和 zjq 玩三国杀，今年他们都要进队了，该轮到我玩三国杀了。（奶* 3）</p><p>当然，玩三国杀的还有 SaoFish。</p><p>不多说了，都是泪啊。</p><hr><h1 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h1><p>昨天晚上有个小学同学让我晚上给她寝室打电话，我：？？？</p><p>早上困得1P，和 Sinner 坐一起，后面是 bzt，压力山大。</p><p>他们都在调代码就我在水游记，emm羞愧难当。</p><p>车挺小，挤得非常满，有点头晕。</p><p>到填海估计中午了，到时候就可以去找老熟人玩了。</p><hr><p>十一点多的时候到酒店了，成功见到了 SaoFish，果然是在* 中emm</p><p>阿中的好像住得很远，可能今天都见不到了吧，不知道下午的颁奖会上能不能碰到。</p><p>反正我是上不了台领奖的【笑】。</p><hr><p>成功在填海门口遇见 Dilute，还看到 Sooke 了，emm几个月不见 Sooke 的发型更加飘逸了。</p><p>还看见 xxc（吹雪吹雪吹）了，但是机会没把握好，没打成招呼，wxw（LJC00118）和 wyl（memset0）等人则根本没看见人影。</p><p>阿中的人好多啊，整整一大巴的人，咱小地方的高中就一中巴的人，不过阿中的人都没开始就回去了。</p><p>脑补：</p><ul><li><p>LJ：啊呀你们就不要去了，完全就是浪费时间，txc 那几个领奖的和我走一趟</p><p>（然后哼着小曲走掉了）</p></li></ul><p>进场之后发现 LJ 其实就在我们这一排，而且坐的离我们非常近，不过我这个位置离他比较远，大概是发现不了。</p><p>咱这个位置非常神奇啊，第二排，前面一排全是妹子，结果发现大概不是 OIer，是负责颁奖的。</p><p><img src="https://i.loli.net/2019/04/09/5caca40583f4b.jpg" alt=""></p><p><img src="https://i.loli.net/2019/04/09/5caca404a4f04.jpg" alt=""></p><p><img src="https://i.loli.net/2019/04/09/5caca407174e2.jpg" alt=""></p><p>（图一：颁奖现场；图二：偷拍的 LJ；图三：填海发的袋子）</p><p>本以为进行两个小时的颁奖会半个小时就弄完了，真的神奇……</p><p>回酒店和 bzt 乱搞一通，写写游记，看看能不能水两题，等吃晚饭了。</p><hr><p>吃完饭依然没啥事干啊……和 SaoFish 还有遥远的 xuxing 颓了一会儿，看看 FMT 好了。</p><p>（注：FMT 指咕咕见面会，而非快速莫比乌斯变换）</p><hr><h1 id="Day-1-1"><a href="#Day-1-1" class="headerlink" title="Day 1"></a>Day 1</h1><p>上午听填海神仙 lyx 讲课，居然是传说中的《具体数学》，从头开始就听不懂了……</p><p>勉强理解了一番，和 Sooke 瞎扯了一会儿，感觉一脸懵。</p><p>下课的时候成功和 wxw 搞到了一起，还见到了 yyh 和 xxc，感觉海星。</p><p>然而现在一群人正在疯狂试图连接到大屏幕……</p><p>下午听说是孔爷讲课，期待。</p><p><img src="https://i.loli.net/2019/04/09/5caca40401be3.jpg" alt=""></p><p>（图：讲课中途第一次休息时的 Sooke）</p><hr><p>孔爷开始讲课啦，帅炸啦。</p><p><img src="https://i.loli.net/2019/04/09/5caca403f3dff.jpg" alt=""></p><p>（图：孔爷 &amp; 题目）</p><hr><p>下午孔爷讲课的时候，题面一放就跑去水群了……不愧是julao……</p><p>不过我啥也没听懂……</p><p>wxw 表示这一天上午学会了打麻将，下午练习了打麻将……</p><p>（雀魂或占领 OI 界）</p><p>晚饭后去试了机，地方超级窄……不过写代码还是可以写的……</p><p>把 Sooke 和 wxw 拉到酒店里来深入交♂流了一下（指喝了奶茶），然后就是等晚上颓废啦。</p><hr><p>晚上打联谊赛，带错符文心态崩了。</p><hr><h1 id="Day-2-1"><a href="#Day-2-1" class="headerlink" title="Day 2"></a>Day 2</h1><p>上午讲数据结构题……一脸懵逼……</p><hr><p>下午讲随机算法，能听懂一点，海星。</p><p>不过除了最小圆覆盖咱都没学过，有点自闭……</p><hr><p>晚上还是比较开心的，打了一把很快乐的巨魔。</p><p>等明天比赛吧。</p><hr><h1 id="Day-3-1"><a href="#Day-3-1" class="headerlink" title="Day 3"></a>Day 3</h1><p>终于到比赛日了，反正咱是来玩的，爆个零也无所谓吧。</p><p>解压密码：JYB@Xzc!!3Yue* ，疯狂暗示什么。</p><p>第一题，“九条可怜是一个喜欢打麻将的女孩子”。</p><p>艹，昨天 Sooke 说会有打麻将结果还真有了，大概率是雀魂了。</p><p>雀魂果然要占领 OI 界吗……</p><p>神仙期望题，本来想写爆搜骗个分，但看到数据范围非常犹豫，毕竟 $10!$ 就已经承受不了了，况且还想不到有什么比较好的办法来判断能否胡牌。</p><p>想了一会儿，先丢到一边，跑去看第二题了。</p><p>第二题，“九条可怜是一个喜欢数据结构的女孩子”。</p><p>$20$ 分看着非常可做，先写了。至于剩下的？</p><p>瞎猜了一个性质，发现会被交叉的区间卡，不管了直接写了，特判一下分别跑吧。</p><p>第三题，“九条可怜是一个喜欢玩游戏的女孩子”。</p><p>什么神仙题……据说部分分有 $50$，但是根本不知道怎么写啊……</p><p>溜了溜了……</p><p>Scape 鸽鸽：队线 $200+$ 吧……</p><p>猜一下二试的题：</p><ol><li><p>打麻将</p></li><li><p>麻打将</p></li><li><p>将麻打</p></li></ol><p><img src="https://uploadfiles.nowcoder.com/files/20190409/225283853_1554818406991_5caca3ff70b9d.png" alt=""></p><hr><h1 id="二试"><a href="#二试" class="headerlink" title="二试"></a>二试</h1><hr><h1 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h1><p>咱居然能来二试……有点开森……</p><hr><h1 id="Day-0-1"><a href="#Day-0-1" class="headerlink" title="Day 0"></a>Day 0</h1><p>下午来的，发现绍一的比我们快了一个多小时……阿中那边的话，Sooke 不理我【哭】，还好 wxw 提供了一些有用的情报……</p><p>晚饭去传说中的“江谈笑风生”（指华莱士）吃，结果发现衢二一群人都在那里……</p><p>晚饭后回去玩的，本来啥事没有，结果十一点多的时候突然有人来敲门，我还以为查水表的来了……结果开门是 ykj，说隔壁的 jjc 骨折了，从凳子上摔下来了，搞得我慌的 1P，赶紧让打了 120，结果弄了半天发现我啥事也干不上，手机还被 ykj 拿走了……</p><p>于是回去继续打游戏，打完突然想起来：他拿走我手机不知道我密码啊……</p><p>赶紧联系我的手机，总算是 ojbk 了。弄到零点多，ykj 还记得回来还手机，舒服。</p><hr><h1 id="Day-1-2"><a href="#Day-1-2" class="headerlink" title="Day 1"></a>Day 1</h1><p>听说下午 zzq 讲课，瑟瑟发抖……</p><p>上午讲点分边分啥的，众所周知我都不会，所以下线的很早。硬着头皮听了一会儿，突然发现 ljx 就在正后方，于是就跑过去玩了。</p><p>快乐元气进行中，结果莫名非常卡，人物都在瞬移，还是挺烦的。</p><p>老 K 跑到我们这里来逛了一会儿该，不知道为啥。</p><p>混着混着就到下午了，终于亲眼见到 zzq 巨神了，激动。</p><p>结果又是“杂题选讲”【哭】，看到这四个字我都不想听了，蓝瘦滴很。</p><p>听了一会儿又下线了，完全不知道在说什么。</p><p>晚饭吃完又跑去和阿中的颓了，感觉海星。</p><hr><h1 id="Day-2-2"><a href="#Day-2-2" class="headerlink" title="Day 2"></a>Day 2</h1><p>全天水题选讲……不过感觉没有 D1 难度高，所以 杂题&gt;水题【雾】</p><p>上午依然是快乐颓废，本来想找 xy ljx 和 Sooke 打雀魂，结果维护……真的是愁死我了……</p><p>好不容易熬过上午，还咕了十几分钟才开服。</p><p>开服之后赶紧拉上 ljx 和 xy 打了一局，结果……</p><p>第一局，xy 满贯，2.4w 点砸到 Sooke 的头上。</p><p>又过了两局，Sooke 飞了……</p><p>说再来一局，结果 Sooke 突然把老 K 拉了进来，瑟瑟发抖……</p><p>结果老 K 的两个清一色直接就被 ljx 两个断幺九弄没了……扎心了。</p><p>窝唯一胡的一把，两巡的时候就立直了…然后瞬间就自摸胡掉了，大概用掉了一辈子的运气。</p><p>晚上依然是快乐联盟，耍个剑姬被 qwk 的诺手打爆了，心态小崩。</p><hr><h1 id="Day-3-2"><a href="#Day-3-2" class="headerlink" title="Day 3"></a>Day 3</h1><p>比赛日啦，目标依然是不爆零。</p><p>解压密码：HI!9527@you#Too%，不知道是在暗示什么 <del>（zlw 说是 too young too simple）</del>。</p><p>看了一下题目名字，居然没有麻将或者自走棋，猜错了……</p><p>T1 依然是神仙期望，看着感觉有点想法，但是做不来。</p><p>T2 感觉比较可做，<del>虽然我做不来</del> 打了个 40 分暴力滚粗了。</p><p>（事后说是线段树合并，并不会qaq）</p><p>T3 一个很迷的模拟题，有一点想法，但是代码太复杂了，最后还是瞎骗了一点分……</p><p>滚粗了滚粗了</p><p><img src="https://uploadfiles.nowcoder.com/files/20190409/225283853_1554818406991_5caca3ff70b9d.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一试&quot;&gt;&lt;a href=&quot;#一试&quot; class=&quot;headerlink&quot; title=&quot;一试&quot;&gt;&lt;/a&gt;一试&lt;/h1&gt;&lt;hr&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;今年菜爆啦，只能以非正式选手的身份去玩了，对自己来说只能算是和好久没见到的小伙伴的面基会了。&lt;/p&gt;
&lt;p&gt;还可以找到失踪的 SaoFish。&lt;/p&gt;
&lt;p&gt;咱机房还是有几位正式选手的，希望他们能进队吖。（奶* 1）&lt;/p&gt;
    
    </summary>
    
    
      <category term="游记" scheme="http://VenusNero.github.io/tags/%E6%B8%B8%E8%AE%B0/"/>
    
      <category term="ZJOI2019" scheme="http://VenusNero.github.io/tags/ZJOI2019/"/>
    
  </entry>
  
  <entry>
    <title>题解 模拟赛 3-19</title>
    <link href="http://VenusNero.github.io/2019/03/19/solution_2019_3_19/"/>
    <id>http://VenusNero.github.io/2019/03/19/solution_2019_3_19/</id>
    <published>2019-03-19T14:29:17.079Z</published>
    <updated>2019-04-29T12:01:30.388Z</updated>
    
    <content type="html"><![CDATA[<p>因为 IDE 的一些问题没删成功 freopen，少了 80+ 分，自闭。</p><p>得分 $100+100+0=200$。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=658318&auto=0&height=66"></iframe><a id="more"></a><h1 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h1><p>爆搜每个没有被染色的格子的颜色和它最多能往外扩展多少即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 105</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getchar() (p1==p2 &amp;&amp; (p2=(p1=buf)+fread(buf,1,1&lt;&lt;21,stdin),p1==p2)?EOF:*p1++)</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p1=buf,*p2=buf;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> a[MAXN][MAXN];</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">Read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> fu=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) fu=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch<span class="number">-48</span>);</span><br><span class="line">x*=fu;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Check</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&lt;<span class="number">1</span> || x&gt;n || y&lt;<span class="number">1</span> || y&gt;m || a[x<span class="number">-1</span>][y]==col || a[x][y<span class="number">-1</span>]==col || a[x+<span class="number">1</span>][y]==col || a[x][y+<span class="number">1</span>]==col;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> T=<span class="number">1</span>;T&lt;=n;T++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!a[x+len][y] &amp;&amp; !a[x][y+len] &amp;&amp; !Check(x+len,y,col) &amp;&amp; !Check(x,y+len,col))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">bool</span> fg=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;col;i++) <span class="keyword">if</span>(!Check(x,y+len,i)) fg=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(fg) <span class="keyword">break</span>;</span><br><span class="line">len++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!len) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;x+len;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=y;j&lt;y+len;j++) a[i][j]=col;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Read(n);</span><br><span class="line">Read(m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!a[i][j])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">4</span>;k++) <span class="keyword">if</span>(Dfs(i,j,k)) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++) <span class="built_in">printf</span>(<span class="string">"%c"</span>,<span class="keyword">char</span>(a[i][j]+<span class="number">64</span>));</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h1><p>先跑 floyd，然后枚举起点 $S$ 和终点 $T$，同时枚举每条边 $i-T$ 是否在 $S-T$ 的最短路上，如果是则令 $sum[i]+1$，$sum$ 加完之后再枚举终点，枚举中间点 $i$，如果 $i-T$ 的最短路在 $S-T$ 的最短路上，则让 $ans[S][T]$ 加上 $sum[i]$，即可得到答案。</p><p>思想和 dp 比较像。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 505</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXM 250005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getchar() (p1==p2 &amp;&amp; (p2=(p1=buf)+fread(buf,1,1&lt;&lt;21,stdin),p1==p2)?EOF:*p1++)</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p1=buf,*p2=buf;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,S,sum[MAXN],g[MAXN][MAXN],dis[MAXN][MAXN],ans[MAXN][MAXN];</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">Read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> fu=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) fu=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch<span class="number">-48</span>);</span><br><span class="line">x*=fu;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Cmp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> dis[S][x]&lt;dis[S][y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">freopen(<span class="string">"test.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="built_in">memset</span>(g,<span class="number">60</span>,<span class="keyword">sizeof</span>(g));</span><br><span class="line"><span class="built_in">memset</span>(dis,<span class="number">60</span>,<span class="keyword">sizeof</span>(dis));</span><br><span class="line"><span class="keyword">int</span> inf=dis[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">Read(n);</span><br><span class="line">Read(m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line">Read(x);</span><br><span class="line">Read(y);</span><br><span class="line">Read(z);</span><br><span class="line">g[x][y]=g[y][x]=z;</span><br><span class="line">dis[x][y]=dis[y][x]=z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) dis[i][i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) <span class="keyword">if</span>(i!=j &amp;&amp; j!=k &amp;&amp; dis[i][k]!=inf &amp;&amp; dis[k][j]!=inf) dis[i][j]=min(dis[i][j],dis[i][k]+dis[k][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=n;u++)</span><br><span class="line">&#123;</span><br><span class="line">S=u;</span><br><span class="line"><span class="built_in">memset</span>(sum,<span class="number">0</span>,<span class="keyword">sizeof</span>(sum));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=i;</span><br><span class="line"><span class="keyword">if</span>(u==v || dis[u][v]==inf) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) <span class="keyword">if</span>(g[j][v]!=inf &amp;&amp; dis[u][j]+g[j][v]==dis[u][v]) sum[v]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=i;</span><br><span class="line"><span class="keyword">if</span>(u==v || dis[u][v]==inf) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) <span class="keyword">if</span>(u!=j &amp;&amp; dis[u][j]+dis[j][v]==dis[u][v]) ans[u][v]+=sum[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++) <span class="built_in">printf</span>(<span class="string">"%lld "</span>,ans[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h1><p>这种问题不是网络流就是并查集（不考虑爆搜）……</p><p>考虑破环成链，如果删除的点周围（左上右上左下右下也算）有一个已删除的点，它在并查集中的祖先记为 $x$，它的复制的周围也有一个已删除的点，它的祖先记为 $y$，如果有任意 $x=y$，则这个点不能被删除，因为显然如果满足上述条件，它就是自上到下的必经路程。</p><p>修改时将删除点和它的复制周围的点的祖先改为它即可。</p><p>（感觉没问题但并不能 AC？只能拿 $84$ pts）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 3005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="comment">//#define getchar() (p1==p2 &amp;&amp; (p2=(p1=buf)+fread(buf,1,1&lt;&lt;21,stdin),p1==p2)?EOF:*p1++)</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p1=buf,*p2=buf;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,q,a[MAXN][MAXN&lt;&lt;<span class="number">1</span>],f[MAXN*MAXN*<span class="number">2</span>],ans;</span><br><span class="line"><span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,dy[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">Read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> fu=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) fu=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch<span class="number">-48</span>);</span><br><span class="line">x*=fu;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x==f[x]?x:f[x]=Find(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Id</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (x<span class="number">-1</span>)*m*<span class="number">2</span>+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Read(n);</span><br><span class="line">Read(m);</span><br><span class="line">Read(q);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n*m*<span class="number">2</span>;i++) f[i]=i;</span><br><span class="line"><span class="keyword">while</span>(q--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">Read(x);</span><br><span class="line">Read(y);</span><br><span class="line"><span class="keyword">bool</span> fg=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">8</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> nx=x+dx[i],ny=y+dy[i];</span><br><span class="line"><span class="keyword">if</span>(a[nx][ny])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> idi=Id(nx,ny);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">8</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mx=x+dx[j],my=y+m+dy[j];</span><br><span class="line">my=(my<span class="number">-1</span>)%(m*<span class="number">2</span>)+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a[mx][my])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> idj=Id(mx,my);</span><br><span class="line"><span class="keyword">if</span>(Find(idi)==Find(idj))</span><br><span class="line">&#123;</span><br><span class="line">fg=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!fg) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!fg) <span class="keyword">continue</span>;</span><br><span class="line">ans++;</span><br><span class="line">a[x][y]=<span class="number">1</span>;</span><br><span class="line">a[x][y+m]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> idn=Id(x,y),idm=Id(x,y+m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">8</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> nx=x+dx[i],ny=y+dy[i];</span><br><span class="line"><span class="keyword">if</span>(a[nx][ny]) f[Find(Id(nx,ny))]=idn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">8</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mx=x+dx[i],my=y+m+dy[i];</span><br><span class="line">my=(my<span class="number">-1</span>)%(m*<span class="number">2</span>)+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a[mx][my]) f[Find(Id(mx,my))]=idm;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为 IDE 的一些问题没删成功 freopen，少了 80+ 分，自闭。&lt;/p&gt;
&lt;p&gt;得分 $100+100+0=200$。&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=658318&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://VenusNero.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="比赛" scheme="http://VenusNero.github.io/tags/%E6%AF%94%E8%B5%9B/"/>
    
      <category term="最短路" scheme="http://VenusNero.github.io/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
      <category term="爆搜" scheme="http://VenusNero.github.io/tags/%E7%88%86%E6%90%9C/"/>
    
      <category term="并查集" scheme="http://VenusNero.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>多项式算法学习笔记</title>
    <link href="http://VenusNero.github.io/2019/03/19/poly_algorithm_note/"/>
    <id>http://VenusNero.github.io/2019/03/19/poly_algorithm_note/</id>
    <published>2019-03-19T14:02:28.155Z</published>
    <updated>2019-04-29T12:01:32.900Z</updated>
    
    <content type="html"><![CDATA[<p>这里是一个菜鸡的多项式学习笔记……</p><p>只会背板子不会原理哇qaq</p><p>目前更新至：多项式除法</p><p>Todolist：多项式三角函数</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=31108205&auto=0&height=66"></iframe><a id="more"></a><h1 id="1-多项式乘法"><a href="#1-多项式乘法" class="headerlink" title="1 多项式乘法"></a>1 多项式乘法</h1><p>基础中的基础吧……</p><p>珂以用 FFT 或者 NTT 求解，其中 FFT 没有限制，NTT 精度更高，但 NTT 需要限制模数为 $998244353$。</p><p>FFT 也有两种形式，即递归与非递归，非递归要快上很多。</p><p>FFT（非递归）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">    <span class="keyword">friend</span> Complex <span class="keyword">operator</span> + (Complex a,Complex b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (Complex)&#123;a.x+b.x,a.y+b.y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Complex <span class="keyword">operator</span> - (Complex a,Complex b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (Complex)&#123;a.x-b.x,a.y-b.y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Complex <span class="keyword">operator</span> * (Complex a,Complex b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (Complex)&#123;a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;f[<span class="number">1000005</span>],g[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> Pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FFT</span><span class="params">(Complex *x,<span class="keyword">int</span> Type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;maxn;i++) <span class="keyword">if</span>(i&lt;R[i]) swap(x[i],x[R[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;maxn;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Complex W=(Complex)&#123;<span class="built_in">cos</span>(Pi/i),Type*<span class="built_in">sin</span>(Pi/i)&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;maxn;j+=(i&lt;&lt;<span class="number">1</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            Complex w=(Complex)&#123;<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;i;k++)</span><br><span class="line">            &#123;</span><br><span class="line">                Complex a=x[j+k],b=w*x[i+j+k];</span><br><span class="line">                x[j+k]=a+b;</span><br><span class="line">                x[i+j+k]=a-b;</span><br><span class="line">                w=W*w;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FFT 的代码比较老，凑合着看吧。</p><p>其中 Type 为 $1$ 时为正变换，Type 为 $-1$ 时为逆变换。</p><p>NTT（Gi 为 $3$，Mod 为 $998244353$）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NTT</span><span class="params">(<span class="keyword">int</span> *A,<span class="keyword">int</span> typ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++) <span class="keyword">if</span>(i&lt;rev[i]) swap(A[i],A[rev[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> mid=<span class="number">1</span>;mid&lt;lim;mid&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> Wn=QuickPow(Gi,(Mod<span class="number">-1</span>)/(mid&lt;&lt;<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;lim;j+=mid&lt;&lt;<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> W=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;mid;k++,W=W*Wn%Mod)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> x=A[j+k],y=W*A[j+k+mid]%Mod;</span><br><span class="line">                A[j+k]=(x+y)%Mod;</span><br><span class="line">                A[j+k+mid]=(x-y+Mod)%Mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(typ==<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> inv=QuickPow(lim,Mod<span class="number">-2</span>);</span><br><span class="line">    reverse(A+<span class="number">1</span>,A+lim);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++) A[i]=A[i]*inv%Mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模板题 FFT 的速度在 $2000$~$3000$ ms，而 NTT 在 $1000$~$2000$ ms，快了 $1000$ ms 左右。</p><hr><h1 id="2-多项式求逆"><a href="#2-多项式求逆" class="headerlink" title="2 多项式求逆"></a>2 多项式求逆</h1><p>已知 $F(x)$，要求 $G(x)$ 令 $F(x)\times G(x)\equiv 1 ( \text{mod}  x^n )$</p><p>采用递归的思想，假设我们现在求出了 $G’$：</p><script type="math/tex; mode=display">F\times G'\equiv 1\ (\text{mod}\ \ x^{\lceil {n\over 2}\rceil})</script><p>则：</p><script type="math/tex; mode=display">F\times G\equiv 1\ (\text{mod}\ \ x^{\lceil {n\over 2}\rceil})</script><p>相减得：</p><script type="math/tex; mode=display">G'-G\equiv 0\ (\text{mod}\ \ x^n)</script><p>两边平方，拆开来：</p><script type="math/tex; mode=display">G'^2-2GG'+G^2\equiv 0\ (\text{mod}\ \ x^n)</script><p>两边同乘上 $F$，因为 $F(x)\times G(x)\equiv 1 ( \text{mod}  x^n )$，所以：</p><script type="math/tex; mode=display">FG'^2-2G'+G\equiv 0\ (\text{mod}\ \ x^n)</script><p>移项，则可得：</p><script type="math/tex; mode=display">G=2G'-FG'^2\equiv 0\ (\text{mod}\ \ x^n)</script><p>递推式 get√，自下往上递归求解即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetInv</span><span class="params">(<span class="keyword">int</span> *f,<span class="keyword">int</span> *g,<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(len==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        g[<span class="number">0</span>]=QuickPow(f[<span class="number">0</span>],Mod<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    GetInv(f,g,len+<span class="number">1</span>&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    lim=<span class="number">1</span>;</span><br><span class="line">    m=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(lim&lt;(len&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        lim&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        m++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;lim;i++) rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(m<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) C[i]=f[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=len;i&lt;lim;i++) C[i]=<span class="number">0</span>;</span><br><span class="line">    NTT(C,<span class="number">1</span>);</span><br><span class="line">    NTT(g,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++) g[i]=((<span class="number">2l</span>l-g[i]*C[i]%Mod)+Mod)%Mod*g[i]%Mod;</span><br><span class="line">    NTT(g,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=len;i&lt;lim;i++) g[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="3-多项式对数函数"><a href="#3-多项式对数函数" class="headerlink" title="3 多项式对数函数"></a>3 多项式对数函数</h1><p>已知 $F(x)$，要求 $G(x)$ 令 $G(x)\equiv \ln F(x) (\text{mod}  x^n)$。</p><p>这个东西其实不难求，我们令函数 $f(x)=\ln(x)$，则原式可以化作：</p><script type="math/tex; mode=display">G(x)\equiv f(F(x))\ (\text{mod}\ \ x^n)</script><p>然后两边求导，可以发现 $f(F(x))$ 是个复合函数，复合函数求导公式为 $f(g(x))’=f’(g(x))g’(x)$，所以左右求导之后为：</p><script type="math/tex; mode=display">G'(x)=f'(F(x))F'(x)\ (\text{mod}\ \ x^n)</script><p>此时我们可以想一想 $\ln$ 的求导公式，$\ln’(x)={1\over x}$，所以接着可以化为：</p><script type="math/tex; mode=display">G'(x)={F'(x)\over F(x)}\ (\text{mod}\ \ x^n)</script><p>这个时候你可能要问了：诶多项式除法？你在逗我吗？</p><p>当然不是辣……我们刚刚才学多项式的逆元，反正我们不要求商只要求余数，为什么不拿出来用呢？</p><p>所以我们只需要将读入的 $G$ 求导作为 $a$，求逆作为 $b$，计算出 $a\times b (\text{mod}  998244353)$，此时求出的是 $G’$，对它求积分就可以得出我们要求的 $G$ 了。</p><p>什么？你不会求导和积分？<del>em那你为什么要做多项式题</del></p><p>给出求导与积分公式如下：</p><script type="math/tex; mode=display">{x^a}'=ax^{a-1},\quad \int x^{a}dx={1\over a+1}x^{a+1}</script><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetDev</span><span class="params">(<span class="keyword">int</span> *f,<span class="keyword">int</span> *g,<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++) g[i<span class="number">-1</span>]=i*f[i]%Mod;</span><br><span class="line">    g[len<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetInvDev</span><span class="params">(<span class="keyword">int</span> *f,<span class="keyword">int</span> *g,<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++) g[i]=f[i<span class="number">-1</span>]*QuickPow(i,Mod<span class="number">-2</span>)%Mod;</span><br><span class="line">    g[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetLn</span><span class="params">(<span class="keyword">int</span> *f,<span class="keyword">int</span> *g,<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GetDev(f,a,len);</span><br><span class="line">    GetInv(f,b,len);</span><br><span class="line">    lim=<span class="number">1</span>;</span><br><span class="line">    m=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(lim&lt;(len&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        lim&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        m++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;lim;i++) rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(m<span class="number">-1</span>));</span><br><span class="line">    NTT(a,<span class="number">1</span>);</span><br><span class="line">    NTT(b,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++) a[i]=a[i]*b[i]%Mod;</span><br><span class="line">    NTT(a,<span class="number">-1</span>);</span><br><span class="line">    GetInvDev(a,g,len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="4-多项式指数函数"><a href="#4-多项式指数函数" class="headerlink" title="4 多项式指数函数"></a>4 多项式指数函数</h1><p>神仙方法……需要先学泰勒展开，然后借助泰勒展开学会牛顿迭代，然后才能做……</p><p>泰勒展开就不讲了，牛顿迭代可以见<a href="http://blog.miskcoo.com/2015/06/polynomial-with-newton-method" target="_blank" rel="noopener">这里</a>，反正最后可以得到：</p><script type="math/tex; mode=display">F(z)\equiv F_0(z)-{G(F_0(z))\over G'(F_0(z))}\ (\text{mod}\ \ z^n)</script><p>所以我们考虑求 $G(x)$ 使 $G(x)=e^{F(x)}$，直接求显然是不现实的，那么我们因为刚刚学了对数函数，而对数和指数是逆运算，所以我们考虑把它转化成指数：</p><script type="math/tex; mode=display">\ln G(x)-F(x)=0</script><p>出现了 $0$，那么我们刚刚学牛顿迭代，所以我们考虑用它来求零点，令 $f(G(x))=\ln G(x)-F(x)$，珂以把 $F(x)$ 看成常数项，所以求导出来是：$f’(G(x))={1\over G(x)}$，把这两个代进牛顿迭代的式子，珂以得到：</p><script type="math/tex; mode=display">G(x)\equiv G_0(x)-{\ln G_0(x)-F(x) \over {1\over G_0(x)}} \ (\text{mod}\ \ x^n)</script><script type="math/tex; mode=display">G(x)\equiv G_0(x)-(\ln G_0(x)-F(x) )\times G_0(x) \ (\text{mod}\ \ x^n)</script><script type="math/tex; mode=display">G(x)\equiv G_0(x)(1-\ln G_0(x)+F(x)) \ (\text{mod}\ \ x^n)</script><p>依然递归求解即可。</p><p>（求 $\ln$ 的时候记得清空 a 数组……）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetExp</span><span class="params">(<span class="keyword">int</span> *f,<span class="keyword">int</span> *g,<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(len==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        g[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    GetExp(f,g,len+<span class="number">1</span>&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    lim=<span class="number">1</span>;</span><br><span class="line">    m=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(lim&lt;(len&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        lim&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        m++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;lim;i++) rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(m<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(len&lt;&lt;<span class="number">1</span>);i++) d[i]=e[i]=<span class="number">0</span>;</span><br><span class="line">    GetLn(g,d,len);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) e[i]=f[i];</span><br><span class="line">    NTT(g,<span class="number">1</span>);</span><br><span class="line">    NTT(d,<span class="number">1</span>);</span><br><span class="line">    NTT(e,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++) g[i]=(<span class="number">1l</span>l-d[i]+e[i]+Mod)*g[i]%Mod;</span><br><span class="line">    NTT(g,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=len;i&lt;lim;i++) g[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="5-多项式快速幂"><a href="#5-多项式快速幂" class="headerlink" title="5 多项式快速幂"></a>5 多项式快速幂</h1><p>这个好“简单”的……</p><p>前置芝士为 多项式 $\exp$ 和 多项式 $\ln$……</p><p>考虑对数函数的性质，即：$log_ab^k=klog_ab$，这个对多项式也适用。</p><p>那么我们知道，$\exp$ 其实就是 $e^x$，$\ln$ 其实就是 $log_ex$，那么……</p><p>要求 $G(x)$ 使得 $G(x)=F^k(x)$，两边取自然对数，得：</p><script type="math/tex; mode=display">\ln G(x)=k\ln F(x)</script><p>所以我们把 $F(x)$ 求 $\ln$，把系数乘上 $k$，然后做一遍 $\exp$ 就得到了 $G(x)$。</p><p><del>（简不简单吖~）</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld %s"</span>,&amp;n,s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> l=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=l;i++) k=((k&lt;&lt;<span class="number">3</span>)+(k&lt;&lt;<span class="number">1</span>)+(s[i]<span class="number">-48</span>))%Mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;F[i]);</span><br><span class="line">    GetLn(F,G,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) G[i]=G[i]*k%Mod;</span><br><span class="line">    <span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line">    GetExp(G,T,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">printf</span>(<span class="string">"%lld "</span>,T[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="6-多项式开根"><a href="#6-多项式开根" class="headerlink" title="6 多项式开根"></a>6 多项式开根</h1><p>又是一道简单题……</p><p>要求 $G(x)$ 使得 $G(x)^2=F(x)$，想一想多项式快速幂的结论，想一想对数的性质：$log_ab^k=klog_ab$，于是可以将它化成：</p><script type="math/tex; mode=display">2\ln G(x)=\ln F(x)</script><p>和多项式快速幂一样的处理方法，求出 $\ln$ 后将系数除 $2$（乘 $2$ 的逆元），然后一遍 $\exp$ 带走。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;F[i]);</span><br><span class="line">    GetLn(F,G,n);</span><br><span class="line">    <span class="keyword">int</span> inv=QuickPow(<span class="number">2</span>,Mod<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) G[i]=G[i]*inv%Mod;</span><br><span class="line">    <span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line">    GetExp(G,T,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">printf</span>(<span class="string">"%lld "</span>,T[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="7-多项式除法"><a href="#7-多项式除法" class="headerlink" title="7 多项式除法"></a>7 多项式除法</h1><p>神奇的方法……</p><p>这个还是背结论吧……</p><p>给出 $F(x)$ 和 $G(x)$，要求出 $Q(x)$ 和 $R(x)$ 使得 $F(x)\equiv Q(x)\times G(x)+R(x)$。</p><p>我们设多项式 $A$ 的 $A_r=x^nA({1\over x})$，也就相当于把系数全部倒过来，然后珂以开始化式子：</p><script type="math/tex; mode=display">F(x)=Q(x)\times G(x)+R(x)</script><script type="math/tex; mode=display">F(\frac{1}{x})=Q(\frac{1}{x})\times G(\frac{1}{x})+R(\frac{1}{x})</script><script type="math/tex; mode=display">x^nF(\frac{1}{x})=x^{n-m}Q(\frac{1}{x})\times x^mG(\frac{1}{x})+x^{n-m+1}\times x^{m-1}\times R(\frac{1}{x})</script><script type="math/tex; mode=display">F_r(x)=Q_r(x)\times G_r(x)+x^{n-m+1}\times R_r(x)\ (\text{mod}\ \ x^{n-m+1})</script><script type="math/tex; mode=display">F_r(x)=Q_r(x)\times G_r(x)\ (\text{mod} \ \ x^{n-m+1})</script><script type="math/tex; mode=display">Q_r(x)=F_r(x)\times G_r^{-1}(x)\ (\text{mod} \ \ x^{n-m+1})</script><p>所以我们可以先求出 $F_r$ 和 $G_r$，然后求出 $G_r$ 的逆元，乘起来之后再反过来就可以得到 $Q$ 了，最后把 $Q$ 和 $G$ 乘起来，用 $F$ 减去之后就得到 $R$ 了。</p><p>（记得要把 $F_r$ 和 $G_r$ 的无关元素删掉，不然算 $Q$ 的时候要出事）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>,&amp;n,&amp;m);</span><br><span class="line">    n++;</span><br><span class="line">    m++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;F[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;G[i]);</span><br><span class="line">    <span class="keyword">int</span> x=n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++,x--) FF[i]=F[x];</span><br><span class="line">    x=m<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++,x--) GG[i]=G[x];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n-m+<span class="number">1</span>;i&lt;lim;i++) GG[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len=n-m+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=len;i&lt;n;i++) FF[i]=GG[i]=<span class="number">0</span>;</span><br><span class="line">    GetInv(GG,IV,len);</span><br><span class="line">    lim=<span class="number">1</span>;</span><br><span class="line">    mx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(lim&lt;(len&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        lim&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        mx++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;lim;i++) rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(mx<span class="number">-1</span>));</span><br><span class="line">    NTT(FF,<span class="number">1</span>);</span><br><span class="line">    NTT(IV,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++) FF[i]=FF[i]*IV[i]%Mod;</span><br><span class="line">    NTT(FF,<span class="number">-1</span>);</span><br><span class="line">    x=len<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Q[i]=FF[x];</span><br><span class="line">        x--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=len;i&lt;n;i++) Q[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) <span class="built_in">printf</span>(<span class="string">"%lld "</span>,Q[i]);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    len=n;</span><br><span class="line">    lim=<span class="number">1</span>;</span><br><span class="line">    mx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(lim&lt;(len&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        lim&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        mx++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;lim;i++) rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(mx<span class="number">-1</span>));</span><br><span class="line">    NTT(Q,<span class="number">1</span>);</span><br><span class="line">    NTT(G,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++) Q[i]=Q[i]*G[i]%Mod;</span><br><span class="line">    NTT(Q,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m<span class="number">-1</span>;i++) <span class="built_in">printf</span>(<span class="string">"%lld "</span>,(F[i]-Q[i]+Mod)%Mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里是一个菜鸡的多项式学习笔记……&lt;/p&gt;
&lt;p&gt;只会背板子不会原理哇qaq&lt;/p&gt;
&lt;p&gt;目前更新至：多项式除法&lt;/p&gt;
&lt;p&gt;Todolist：多项式三角函数&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=31108205&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;
    
    </summary>
    
    
      <category term="数论" scheme="http://VenusNero.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="多项式算法" scheme="http://VenusNero.github.io/tags/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E7%AE%97%E6%B3%95/"/>
    
      <category term="NTT" scheme="http://VenusNero.github.io/tags/NTT/"/>
    
      <category term="FFT" scheme="http://VenusNero.github.io/tags/FFT/"/>
    
  </entry>
  
  <entry>
    <title>题解 SP2906 GCD2 - GCD2</title>
    <link href="http://VenusNero.github.io/2019/03/11/solution_sp2906/"/>
    <id>http://VenusNero.github.io/2019/03/11/solution_sp2906/</id>
    <published>2019-03-11T12:41:40.277Z</published>
    <updated>2019-04-29T12:01:23.732Z</updated>
    
    <content type="html"><![CDATA[<p>神奇的做法。</p><p>求 $\gcd(a,b)$，其中 $b$ 为极大值。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=628591&auto=0&height=66"></iframe><a id="more"></a><p>首先看到 $b\leq10^{250}$，首先想到<del>自己是个250</del>肯定不是普通做法能做的了，此时我们有两种做法，一种就是老老实实写高精加减，然后写更相减损术，如果您能保证高精不出锅的话也不失为一种稳妥的办法，但显然不是这题的最优解，因为题中还有一个条件：$a\leq4\times10^{4}$，既然 $a$ 能直接存下，那么心中应该有点数了，显然是有别的办法可以做的。</p><p>考虑辗转相除法的流程，即：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> !y?x:Gcd(y,x%y);</span><br></pre></td></tr></table></figure><p>其中 $x$ 初始为 $a$，$y$ 初始为 $b$，那么很显然，在递归了很多遍之后，如果 $b$ 远大于 $a$，那么 $b$ 必然会被 $a$ $\%$ 很多次，而 $a$ 则不会有变化，我们可以利用这个思想，在预处理时可以提前将 $b$ 对 $a$ 取模，然后最后做一遍辗转相除就可以求得答案了。</p><p>什么？你问 $b&lt;a$ 怎么办？那显然预处理时 $b$ 不会变化，对结果也不会有影响。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 255</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> ch[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Gcd</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> !y?x:Gcd(y,x%y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> Time;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;Time);</span><br><span class="line"><span class="keyword">while</span>(Time--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x,len;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %s"</span>,&amp;x,ch+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(!x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,ch+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">len=<span class="built_in">strlen</span>(ch+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++) res=((res&lt;&lt;<span class="number">3</span>)+(res&lt;&lt;<span class="number">1</span>)+(ch[i]<span class="number">-48</span>))%x;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Gcd(res,x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;神奇的做法。&lt;/p&gt;
&lt;p&gt;求 $\gcd(a,b)$，其中 $b$ 为极大值。&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=628591&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://VenusNero.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="乱搞" scheme="http://VenusNero.github.io/tags/%E4%B9%B1%E6%90%9E/"/>
    
  </entry>
  
  <entry>
    <title>题解 SP19985 GCDEX2 - GCD Extreme (hard)</title>
    <link href="http://VenusNero.github.io/2019/03/10/solution_sp19985/"/>
    <id>http://VenusNero.github.io/2019/03/10/solution_sp19985/</id>
    <published>2019-03-10T14:34:16.539Z</published>
    <updated>2019-04-29T12:01:24.883Z</updated>
    
    <content type="html"><![CDATA[<p>杜教筛。</p><p>求：</p><script type="math/tex; mode=display">\sum_{i=1}^{n}\sum_{j=i+1}^{n}gcd(i,j)</script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1350160463&auto=0&height=66"></iframe><a id="more"></a><p>有点神奇的一道题目……</p><p>第一套路，枚举 gcd：</p><script type="math/tex; mode=display">\sum_{d=1}^{n}\sum_{i=1}^{n}\sum_{j=i+1}^{n}d\times[gcd(i,j)=d]</script><p>然后用莫比乌斯反演：</p><script type="math/tex; mode=display">\sum_{d=1}^{n}\sum_{i=1}^{\lfloor{n\over d}\rfloor}\sum_{j=i+1}^{\lfloor{n\over d}\rfloor}\sum_{k|gcd(i,j)}\mu(k)\times d</script><p>数论分块套数论分块？时间复杂度 $\text{O}(n)$ 啊……怎么破……</p><p>隔壁 Sinner：哇 你个 ** 你知不知道什么叫 $\varphi$ 啊？！【批判一番】</p><p>em感觉自己就是个蒟蒻（其实就是个蒟蒻）</p><p>所以我们可以直接把它化成：</p><script type="math/tex; mode=display">\sum_{d=1}^{n}d\times\sum_{i=1}^{\lfloor{n\over d}\rfloor}\varphi(i)</script><p>杜教筛直接上就行了…… $\varphi * I=id$ 好写的 1P ……</p><p>（有些细节要注意，比如计算 $I$ 的前缀和的时候，为了防止溢出之后出错判断奇偶性等）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int unsigned long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,pri[MAXN/<span class="number">10</span>+<span class="number">5</span>],tot,phi[MAXN+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">bool</span> isp[MAXN+<span class="number">5</span>];</span><br><span class="line"><span class="built_in">unordered_map</span> &lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; f;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetPrime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">phi[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">isp[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=MAXN;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!isp[i])</span><br><span class="line">&#123;</span><br><span class="line">pri[++tot]=i;</span><br><span class="line">phi[i]=i<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=tot &amp;&amp; i*pri[j]&lt;=MAXN;j++)</span><br><span class="line">&#123;</span><br><span class="line">isp[i*pri[j]]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(i%pri[j]) phi[i*pri[j]]=phi[i]*(pri[j]<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">phi[i*pri[j]]=phi[i]*pri[j];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=MAXN;i++) phi[i]+=phi[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">G</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (x&amp;<span class="number">1</span>)?((x+<span class="number">1</span>)/<span class="number">2</span>*x):(x/<span class="number">2</span>*(x+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetSum</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=MAXN) <span class="keyword">return</span> phi[x];</span><br><span class="line"><span class="keyword">if</span>(f.count(x)) <span class="keyword">return</span> f[x];</span><br><span class="line"><span class="keyword">int</span> res=G(x),l=<span class="number">2</span>,r;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=x)</span><br><span class="line">&#123;</span><br><span class="line">r=x/(x/l);</span><br><span class="line">res-=(r-l+<span class="number">1</span>)*GetSum(x/l);</span><br><span class="line">l=r+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">f[x]=res;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GetPrime();</span><br><span class="line"><span class="keyword">int</span> Time;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%llu"</span>,&amp;Time);</span><br><span class="line"><span class="keyword">while</span>(Time--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>,l=<span class="number">1</span>,r;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%llu"</span>,&amp;n);</span><br><span class="line"><span class="keyword">while</span>(l&lt;=n)</span><br><span class="line">&#123;</span><br><span class="line">r=n/(n/l);</span><br><span class="line">res+=(GetSum(n/l)<span class="number">-1</span>)*(G(r)-G(l<span class="number">-1</span>));</span><br><span class="line">l=r+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%llu\n"</span>,res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;杜教筛。&lt;/p&gt;
&lt;p&gt;求：&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\sum_{i=1}^{n}\sum_{j=i+1}^{n}gcd(i,j)&lt;/script&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=1350160463&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;
    
    </summary>
    
    
      <category term="数论" scheme="http://VenusNero.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="杜教筛" scheme="http://VenusNero.github.io/tags/%E6%9D%9C%E6%95%99%E7%AD%9B/"/>
    
      <category term="题解" scheme="http://VenusNero.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="数论分块" scheme="http://VenusNero.github.io/tags/%E6%95%B0%E8%AE%BA%E5%88%86%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>题解 P3934 Nephren Ruq Insania</title>
    <link href="http://VenusNero.github.io/2019/03/05/solution_p3934/"/>
    <id>http://VenusNero.github.io/2019/03/05/solution_p3934/</id>
    <published>2019-03-05T13:50:25.606Z</published>
    <updated>2019-04-29T12:01:26.859Z</updated>
    
    <content type="html"><![CDATA[<p>扩展欧拉定理。</p><p>两种操作，区间加和区间查询 $a[l]^{a[l+1]^{a[l+2]}}…\mod p$。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1341733740&auto=0&height=66"></iframe><a id="more"></a><p>好毒瘤的题……之前有一道 <code>CF906D Power Tower</code> 有一种神奇的写法，为了满足扩展欧拉定理中 $b≥\varphi(p)$ 的限制，可以在进行 $\%$ 运算的时候加上一个 $p$，因为 $p&gt;\varphi(p)$，所以就可以不用管限制，最后只要把多出的 $\%$ 掉就行了，但是这道题并不刑【哭】，写法不好就会爆精度，所以我们要考虑别的写法。</p><p>首先，我们在做那道题的时候可以使用递归的写法，但是看看这道题的出题人，emmm于是我们应该使用线性的写法，也就是可以预处理出每一次 $\%$ 的 $\varphi(p)$，然后考虑 $b≥\varphi(p)$ 的限制，我们依然是在运算时额外加上一个 $p$，但是和之前的做法不同，之前是任何运算结束后都要进行判断，我们已经知道了这样会爆精度，所以我们考虑在快速幂过程中记录是否要加上 $p$，最后再加上。</p><p>至于怎么判断是否要加 $p$，因为只要进行了 $\%$ 运算，$b$ 就有可能会 $&lt;\varphi(p)$，所以我们就记录有没有进行 $\%$ 运算即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 20000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getchar() (p1==p2 &amp;&amp; (p2=(p1=buf)+fread(buf,1,1&lt;&lt;21,stdin),p1==p2)?EOF:*p1++)</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p1=buf,*p2=buf;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,c[MAXN+<span class="number">5</span>],pri[MAXN+<span class="number">5</span>],tot,phi[MAXN+<span class="number">5</span>],ha[MAXN+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">bool</span> isp[MAXN+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">Read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> fu=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) fu=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch<span class="number">-48</span>);</span><br><span class="line">x*=fu;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetPrime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">phi[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">isp[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=MAXN;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!isp[i])</span><br><span class="line">&#123;</span><br><span class="line">pri[++tot]=i;</span><br><span class="line">phi[i]=i<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=tot &amp;&amp; i*pri[j]&lt;=MAXN;j++)</span><br><span class="line">&#123;</span><br><span class="line">isp[i*pri[j]]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(i%pri[j]) phi[i*pri[j]]=phi[i]*(pri[j]<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">phi[i*pri[j]]=phi[i]*pri[j];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Modify</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=n)</span><br><span class="line">&#123;</span><br><span class="line">c[x]+=val;</span><br><span class="line">x+=lowbit(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x)</span><br><span class="line">&#123;</span><br><span class="line">res+=c[x];</span><br><span class="line">x-=lowbit(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Mod</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> p,<span class="keyword">bool</span> &amp;fg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;=p)</span><br><span class="line">&#123;</span><br><span class="line">x%=p;</span><br><span class="line">fg=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QuickPow</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">bool</span> fg=<span class="number">0</span>;</span><br><span class="line">Mod(x,p,fg);</span><br><span class="line"><span class="keyword">while</span>(y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(y&amp;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">res=res*x;</span><br><span class="line">Mod(res,p,fg);</span><br><span class="line">&#125;</span><br><span class="line">x=x*x;</span><br><span class="line">Mod(x,p,fg);</span><br><span class="line">y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res+fg*p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//freopen("data.in","r",stdin);</span></span><br><span class="line"><span class="comment">//freopen("outp.out","w",stdout);</span></span><br><span class="line">GetPrime();</span><br><span class="line"><span class="keyword">int</span> pre=<span class="number">0</span>;</span><br><span class="line">Read(n);</span><br><span class="line">Read(m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">Read(x);</span><br><span class="line">Modify(i,x-pre);</span><br><span class="line">pre=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> opt,x,y,z;</span><br><span class="line">Read(opt);</span><br><span class="line">Read(x);</span><br><span class="line">Read(y);</span><br><span class="line">Read(z);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">Modify(x,z);</span><br><span class="line">Modify(y+<span class="number">1</span>,-z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> pos=x;</span><br><span class="line">ha[pos]=z;</span><br><span class="line">z=phi[z];</span><br><span class="line"><span class="keyword">while</span>(z&gt;<span class="number">1</span> &amp;&amp; pos&lt;y)</span><br><span class="line">&#123;</span><br><span class="line">ha[++pos]=z;</span><br><span class="line">z=phi[z];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;pos&gt;=x;pos--) res=QuickPow(Query(pos),res,ha[pos]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,res%ha[x]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（既然是 ynoi 的题解，在结尾给一张 Nephren 的图吧qwq）</p><p><img src="https://z4a.net/images/2019/03/05/64050525_p0.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;扩展欧拉定理。&lt;/p&gt;
&lt;p&gt;两种操作，区间加和区间查询 $a[l]^{a[l+1]^{a[l+2]}}…\mod p$。&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=1341733740&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://VenusNero.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="扩展欧拉定理" scheme="http://VenusNero.github.io/tags/%E6%89%A9%E5%B1%95%E6%AC%A7%E6%8B%89%E5%AE%9A%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>题解 CF906D Power Tower / 欧拉定理 &amp; 扩展欧拉定理学习笔记</title>
    <link href="http://VenusNero.github.io/2019/03/04/solution_cf906d_euler_theorem_note/"/>
    <id>http://VenusNero.github.io/2019/03/04/solution_cf906d_euler_theorem_note/</id>
    <published>2019-03-04T10:56:49.306Z</published>
    <updated>2019-04-29T12:01:29.428Z</updated>
    
    <content type="html"><![CDATA[<p>扩展欧拉定理。</p><p>在了解这东西之前，我们首先要知道欧拉定理是什么。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1309896289&auto=0&height=66"></iframe><a id="more"></a><p>欧拉定理：</p><script type="math/tex; mode=display">\text{当}\ \gcd(a,p)=1 \ \text{时，有}\ a^{\varphi(p)}\equiv1\ (\text{mod}\ p)</script><p>所以可以得：</p><script type="math/tex; mode=display">a^b\equiv a^{b\ \text{mod}\ \varphi(p)}\ (\text{mod}\ p)</script><p>但是因为有一个 $\gcd(a,p)=1$ 的限制，所以不能对所有情况适用，此时我们就需要引入扩展欧拉定理了。</p><script type="math/tex; mode=display">\text{当}\ b≥\varphi(p)\ \text{时，有}\ a^b\equiv a^{b\ \text{mod}\ \varphi(p)+\varphi(p)}\ (\text{mod}\ p)</script><p>$b&lt;\varphi(p)$ 时就正常算就行了。</p><p>知道这个之后我们可以怎么做呢？显然，我们可以递归求解一些形如 $a^b \text{mod} p$ 的问题了，对于这题，也可以不递归，递推即可。</p><p>当然，因为 $m\leq1e9$，所以线筛 $\varphi$ 的办法是刑不通的，我们可以直接暴力算，然后开一个 map 存下我们算的值，重复调用时可以省下很多复杂度。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getchar() (p1==p2 &amp;&amp; (p2=(p1=buf)+fread(buf,1,1&lt;&lt;21,stdin),p1==p2)?EOF:*p1++)</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],*p1=buf,*p2=buf;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,Mod,a[MAXN+<span class="number">5</span>];</span><br><span class="line"><span class="built_in">map</span> &lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; phi;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">Read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> fu=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(ch);ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) fu=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(;<span class="built_in">isdigit</span>(ch);ch=getchar()) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch<span class="number">-48</span>);</span><br><span class="line">x*=fu;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Phi</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=x,pos=x;</span><br><span class="line"><span class="keyword">if</span>(phi.count(x)) <span class="keyword">return</span> phi[x];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="built_in">sqrt</span>(x);i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!(x%i))</span><br><span class="line">&#123;</span><br><span class="line">res=res/i*(i<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">while</span>(!(x%i)) x/=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">1</span>) res=res/x*(x<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">return</span> phi[pos]=res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Mo</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&lt;p?x:(x%p+p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QuickPow</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(y&amp;<span class="number">1</span>) res=Mo(res*x,p);</span><br><span class="line">x=Mo(x*x,p);</span><br><span class="line">y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (l==r || p==<span class="number">1</span>)?Mo(a[l],p):QuickPow(a[l],Dfs(l+<span class="number">1</span>,r,Phi(p)),p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">freopen(<span class="string">"data.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">Read(n);</span><br><span class="line">Read(Mod);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) Read(a[i]);</span><br><span class="line">Read(m);</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">Read(x);</span><br><span class="line">Read(y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,Dfs(x,y,Mod)%Mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;扩展欧拉定理。&lt;/p&gt;
&lt;p&gt;在了解这东西之前，我们首先要知道欧拉定理是什么。&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=1309896289&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://VenusNero.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="题解" scheme="http://VenusNero.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="欧拉定理" scheme="http://VenusNero.github.io/tags/%E6%AC%A7%E6%8B%89%E5%AE%9A%E7%90%86/"/>
    
      <category term="扩展欧拉定理" scheme="http://VenusNero.github.io/tags/%E6%89%A9%E5%B1%95%E6%AC%A7%E6%8B%89%E5%AE%9A%E7%90%86/"/>
    
  </entry>
  
</feed>
